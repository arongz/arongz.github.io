{"meta":{"title":"寺木","subtitle":null,"description":"“任何技术和语言，都只是工具，工具的唯一目的就是把东西做出来，不要因为熟练使用某个工具而沾沾自喜，躲在舒适圈不出来。”","author":"Az","url":"https://oocii.com","root":"/"},"pages":[{"title":"categories","date":"2022-01-06T11:13:01.000Z","updated":"2022-01-07T01:57:57.204Z","comments":true,"path":"categories/index.html","permalink":"https://oocii.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-01-06T10:30:19.000Z","updated":"2022-01-07T01:57:42.109Z","comments":true,"path":"tags/index.html","permalink":"https://oocii.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tag2.","slug":"yuque/tag2","date":"2022-01-06T11:04:58.000Z","updated":"2022-01-08T10:13:59.394Z","comments":true,"path":"yuque/tag2/","link":"","permalink":"https://oocii.com/yuque/tag2/","excerpt":"","text":"gxvxcvxcvxcvx","categories":[{"name":"testtag","slug":"testtag","permalink":"https://oocii.com/categories/testtag/"}],"tags":[{"name":"tags1","slug":"tags1","permalink":"https://oocii.com/tags/tags1/"},{"name":"tags2","slug":"tags2","permalink":"https://oocii.com/tags/tags2/"}]},{"title":"Tags..9","slug":"yuque/Tags..9","date":"2022-01-06T10:24:25.000Z","updated":"2022-01-08T10:13:59.404Z","comments":true,"path":"yuque/Tags..9/","link":"","permalink":"https://oocii.com/yuque/Tags..9/","excerpt":"some description ​","text":"some description ​ ​ more detail","categories":[],"tags":[{"name":"img","slug":"img","permalink":"https://oocii.com/tags/img/"}]},{"title":"JavaScript","slug":"yuque/JavaScript","date":"2022-01-05T03:18:49.000Z","updated":"2022-01-08T10:13:59.407Z","comments":true,"path":"yuque/JavaScript/","link":"","permalink":"https://oocii.com/yuque/JavaScript/","excerpt":"","text":"","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://oocii.com/categories/JavaScript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://oocii.com/tags/ES/"}]},{"title":"CSS_display_属性值分类","slug":"yuque/CSS_display_属性值分类","date":"2022-01-04T12:15:39.000Z","updated":"2022-01-08T10:13:59.513Z","comments":true,"path":"yuque/CSS_display_属性值分类/","link":"","permalink":"https://oocii.com/yuque/CSS_display_%E5%B1%9E%E6%80%A7%E5%80%BC%E5%88%86%E7%B1%BB/","excerpt":"","text":"display 属性可以设置元素的内部和外部显示类型 display types。元素的外部显示类型 outer display types 将决定该元素在流式布局中的表现（块级或内联元素）；元素的内部显示类型 inner display types 可以控制其子元素的布局（例如：flow layout，grid 或 flex）。 在 CSS 规范（特指 CSS Level 1/2/3 规范）中查阅 display 属性的所有取值时需要注意：个别取值的详细信息记录在独立的规范中。 例如，display: flex 的详细信息在 CSS Flexible Box Model 规范中记录。可以在本文档末尾的表格中查看所有有关的规范。 # 语法 display 属性使用关键字取值来指定，关键字取值被分为六类： .container &#123; display: [ &lt;display-outside> | &lt;display-inside> ] | &lt;display-listitem> | &lt;display-internal> | &lt;display-box> | &lt;display-legacy>;&#125;# Outside &lt;display-outside&gt; 这些关键字指定了元素的外部显示类型，实际上就是其在流式布局中的角色（即在流式布局中的表现）。 'page(&quot;/zh-CN/docs/Web/CSS/display-outside&quot;, &quot;Syntax&quot;)' &lt;display-outside&gt; 的可用值： block 这个值会生成一个块级元素盒子，同时在该元素之前和之后打断（换行）。简单来说就是，这个值会将该元素变成块级元素。 inline 这个值会生成一个行内元素盒子，该元素之前和之后不会打断（换行）。如果空间充足，该元素后的元素将会在同一行显示。简单来说就是，这个值会将该元素变成行内元素。 **run-in ** 这个值生成一个 run-in 盒子。如果其后的兄弟元素是块级盒子，那么这个 run-in 盒子就会以兄弟元素的第一个行内元素盒子的形式存在；如果其后的兄弟元素是行内元素，那么这个 run-in 盒子会变成块级元素。 run-in 元素的存在形式取决于相邻的元素，如果它的内部存在 block box，那么它会变成块级元素盒子。 # Inside &lt;display-inside&gt;(en-US) 这些关键字指定了元素的内部显示类型，它们定义了该元素内部内容的布局方式（假定该元素为非替换元素 non-replaced element）。 'page(&quot;/zh-CN/docs/Web/CSS/display-inside&quot;, &quot;Syntax&quot;)' &lt;display-inside&gt; 的可用值： **flow ** 该元素使用流布局（块和内联布局）来布置其内容。 如果它的外部显示类型是 inline 或 run-in，并且它正在参与块或内联格式上下文，那么它会生成一个内联框。否则它会生成一个块容器框。 根据其他属性（例如 position、float、 或 overflow）的值以及它本身是否参与块或内联格式化上下文，它要么为其内容建立新的块格式化上下文 (BFC)，要么将其内容集成到其父格式化中语境。 flow-root 该元素生成一个块元素框，它建立一个新的块格式上下文，定义格式根所在的位置。 table 这些元素的行为类似于 HTML&lt;table&gt; 元素。它定义了一个块级框。 flex 该元素的行为类似于块元素，并根据 flexbox 模型布置其内容。 grid 该元素的行为类似于块元素，并根据网格模型布置其内容。 **ruby ** 该元素的行为类似于内联元素，并根据 ruby 格式模型布置其内容。它的行为类似于相应的 HTML&lt;ruby&gt; 元素。 # List Item &lt;display-listitem&gt;(en-US) 将这个元素的外部显示类型变为 block 盒，并将内部显示类型变为多个 list-item inline 盒。 'page(&quot;/zh-CN/docs/Web/CSS/display-listitem&quot;, &quot;Syntax&quot;)' # Internal &lt;display-internal&gt; 有些布局模型（如 table 和 ruby）有着复杂的内部结构，因此它们的子元素可能扮演着不同的角色。这一类关键字就是用来定义这些 “内部” 显示类型，并且只有在这些特定的布局模型中才有意义。 Valid &lt;display-internal&gt; values: table-row-group These elements behave like &lt;tbody&gt; HTML elements. table-header-group These elements behave like &lt;thead&gt; HTML elements. table-footer-group These elements behave like &lt;tfoot&gt; HTML elements. table-row These elements behave like &lt;tr&gt; HTML elements. table-cell These elements behave like &lt;td&gt; HTML elements. table-column-group These elements behave like &lt;colgroup&gt; HTML elements. table-column These elements behave like &lt;col&gt; HTML elements. table-caption These elements behave like &lt;caption&gt; HTML elements. **ruby-base ** These elements behave like &lt;rb&gt; HTML elements. **ruby-text ** These elements behave like &lt;rt&gt; HTML elements. **ruby-base-container ** These elements behave like &lt;rbc&gt; HTML elements generated as anonymous boxes. **ruby-text-container ** These elements behave like &lt;rtc&gt; HTML elements. # Box &lt;display-box&gt; 这些值决定元素是否使用盒模型。 Valid &lt;display-box&gt; values: contents These elements don't produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. Please note that the CSS Display Level 3 spec defines how the contents value should affect &quot;unusual elements&quot; — elements that aren’t rendered purely by CSS box concepts such as replaced elements. See Appendix B: Effects of display: contents on Unusual Elements for more details. Due to a bug in browsers this will currently remove the element from the accessibility tree — screen readers will not look at what's inside. See the Accessibility concerns section below for more details. none Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off. To have an element take up the space that it would normally take, but without actually rendering anything, use the visibility property instead. # Legacy &lt;display-legacy&gt; CSS 2 对于 display 属性使用单关键字语法，对于相同布局模式的 block 级和 inline 级变体需要使用单独的关键字。 'page(&quot;/en-US /docs/Web/CSS/display-legacy&quot;, &quot;Syntax&quot;)' # 是否该继续使用 Legacy 取值？ CSS Level 3 规范详细说明了 display 属性的两类取值 —— 显式地指定了外部和内部显示属性的规范 —— 但是还没有被浏览器广泛支持。 &lt;display-legacy&gt; 方法允许使用单个关键字达到相同效果，开发者应该在双关键字取值被广泛支持之前采用这个方法。举例来说，你可以这样指定 inline flex 容器： .container { display: inline-flex; } Copy to Clipboard 也可以用两个关键字来指定。 Copy to Clipboard .container { display: inline flex; } 有关规范变更的更多信息，查阅文章 Adapting to the new two-value syntax of display (en-US)。 # 全局设置 /_ Global values _/ display: inherit; display: initial; display: unset;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://oocii.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://oocii.com/tags/CSS/"}]},{"title":"块格式化上下文 Block formatting context(BFC)","slug":"default/块格式化上下文 Block formatting context(BFC)","date":"2021-12-30T07:03:01.000Z","updated":"2022-01-10T11:49:40.378Z","comments":true,"path":"default/块格式化上下文 Block formatting context(BFC)/","link":"","permalink":"https://oocii.com/default/%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87%20Block%20formatting%20context(BFC)/","excerpt":"","text":"block formatting contexts 是 formatting contexts 格式化上下文的概念之一，formatting contexts 其中有几种类型，包括块格式化上下文 block formatting contexts、内联格式化上下文 inline formatting contexts 和灵活格式化上下文 flex formatting contexts。 ​ 块格式化上下文（Block formatting context，BFC） 是 Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。 ​ 文档最外层元素使用块布局规则或称为初始块格式上下文。这意味着 &lt;html&gt; 元素块中的每个元素都是按照正常流程遵循块和内联布局规则进行布局的。参与 BFC 的元素使用 CSS 框模型概述的规则，该模型定义了元素的边距、边框和填充如何与同一上下文中的其他块交互。 # 创建新的块格式上下文 &lt;html&gt; 元素不是唯一能够创建块格式上下文的元素。默认为块布局的任何元素也会为其后代元素创建块格式上下文。此外，还有一些 CSS 属性可以使元素创建一个 BFC，即使默认情况下它不这样做。 以下方式会创建块格式化上下文： 根元素（&lt;html&gt;） 浮动元素（元素的 float 不是 none） 绝对定位元素（元素的 position 为 absolute 或 fixed） 行内块元素（元素的 display 为 inline-block） 表格单元格（元素的 display 为 table-cell，HTML 表格单元格默认为该值） 表格标题（元素的 display 为 table-caption，HTML 表格标题默认为该值） 匿名表格单元格元素（元素的 display 为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是 HTML table、row、tbody、thead、tfoot 的默认属性）或 inline-table） overflow 计算值 (Computed) 不为 visible 的块元素 display 值为 flow-root 的元素 contain 值为 layout、content 或 paint 的元素 弹性元素（display 为 flex 或 inline-flex 元素的直接子元素） 网格元素（display 为 grid 或 inline-grid 元素的直接子元素） 多列容器（元素的 column-count 或 column-width(en-US) 不为 auto，包括 column-count 为 1） column-span 为 all 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。 # BFC 创建例子 让我们看看几个例子，来理解创建 BFC 的效果。 在下面的示例中，我们在应用了边框的 &lt;div&gt; 中有一个浮动元素。该 div 的内容与浮动元素一起浮动。由于 float 的内容比它旁边的内容高，所以现在 DIV 的边框贯穿了 float。如流入和流出元素指南 guide to in-flow and out of flow elements 中所述，浮动已脱离文档流，因此 DIV 的背景和边框仅包含内容，而不包含浮动。 创建一个新的 BFC 将包含该浮动。在过去，一种典型的方法是设置 overflow: auto 或设置其他不是 overflow: visible 的值。 设置 overflow: auto 会自动创建包含浮动的新 BFC。现在，我们的 DIV 在布局中变成了一个迷你布局。任何子元素都将包含在其中。 使用 overflow 创建新的 BFC 的问题在于， overflow 属性用于告诉浏览器您希望如何处理溢出的内容。在某些情况下，当您纯粹使用此属性创建 BFC 时，您会发现不需要的滚动条或剪切阴影。另外，对于未来的开发人员来说，它可能不太可读，因为不能显式地表明为什么要使用溢出来实现这一目的。如果您使用了这个方法，最好对代码进行注释以便他人理解。 ​ # 使用 display:flow-root 显式创建 BFC 使用 display: flow-root （或 display: flow-root list-item）将创建一个新的 BFC，而不会产生任何其他潜在的问题副作用。 使用 &lt;div&gt; 上的 display: flow-root ，该容器内的所有内容都参与该容器的块格式上下文，并且浮动不会从元素底部弹出。 flow-root 关键字的意义是，创建的内容本质上类似于一个新的根元素（如 &lt;html&gt; 所做），并确定这个新的上下文如何创建及其流布局如何实现。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://oocii.com/categories/CSS/"},{"name":"formatting context","slug":"CSS/formatting-context","permalink":"https://oocii.com/categories/CSS/formatting-context/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://oocii.com/tags/CSS/"},{"name":"BFC","slug":"BFC","permalink":"https://oocii.com/tags/BFC/"}]},{"title":"DOM","slug":"yuque/DOM","date":"2021-12-25T10:04:40.000Z","updated":"2022-01-08T10:13:59.543Z","comments":true,"path":"yuque/DOM/","link":"","permalink":"https://oocii.com/yuque/DOM/","excerpt":"","text":"文档对象模型 (DOM) 将 web 页面与到脚本或编程语言连接起来。通常是指 JavaScript，但将 HTML、SVG 或 XML 文档建模为对象并不是 JavaScript 语言的一部分。DOM 模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点 (node)，每个节点都包含着对象 (objects)。DOM 的方法 (methods) 让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。 # DOM 接口 Attr CharacterData ChildNode Comment CustomEvent Document DocumentFragment DocumentType DOMError DOMException DOMImplementation DOMString DOMTimeStamp DOMSettableTokenList DOMStringList DOMTokenList Element Event EventTarget HTMLCollection MutationObserver MutationRecord Node NodeFilter NodeIterator NodeList ParentNode ProcessingInstruction(en-US) Promise(en-US) PromiseResolver(en-US) Range Text TreeWalker URL Window Worker XMLDocument","categories":[],"tags":[]},{"title":"Web APIs","slug":"yuque/Web APIs","date":"2021-12-25T10:00:56.000Z","updated":"2022-01-08T10:13:59.589Z","comments":true,"path":"yuque/Web APIs/","link":"","permalink":"https://oocii.com/yuque/Web%20APIs/","excerpt":"","text":"https://developer.mozilla.org/zh-CN/docs/Web/API ​ B Background Fetch API (en-US) Background Tasks Barcode Detection API (en-US) Battery API Beacon Bluetooth API (en-US) Broadcast Channel API C CSS Counter Styles (en-US) CSS Font Loading API CSS Painting API (en-US) CSS Typed Object Model API (en-US) CSSOM Canvas API Channel Messaging API Clipboard API Console API Contact Picker API (en-US) Content Index API (en-US) Credential Management API D DOM E Encoding API (en-US) Encrypted Media Extensions (en-US) EyeDropper API (en-US) F Fetch API File System Access API (en-US) File and Directory Entries API Fullscreen API G Gamepad API Geolocation API H HTML Drag and Drop API HTML Sanitizer API (en-US) High Resolution Time History API I Image Capture API (en-US) IndexedDB Intersection Observer API L Layout Instability API (en-US) Long Tasks API M Media Capabilities API (en-US) Media Capture and Streams Media Session API (en-US) Media Source Extensions MediaStream Recording N Navigation Timing Network Information API P Page Visibility API Payment Request API Performance API Performance Timeline API Periodic Background Sync (en-US) Permissions API Picture-in-Picture API (en-US) Pointer Events Pointer Lock API Presentation API (en-US) Proximity Events (en-US) Push API R Resize Observer API Resource Timing API S Screen Capture API Screen Orientation API (en-US) Screen Wake Lock API (en-US) Sensor API Server Sent Events Service Workers API Storage Storage Access API (en-US) Streams T Touch Events U URL API URL Pattern API (en-US) V Vibration API Visual Viewport (en-US) W Web Animations Web Audio API Web Authentication API Web Crypto API Web MIDI API (en-US) Web Notifications Web Share API (en-US) Web Speech API Web Storage API Web Workers API WebCodecs API (en-US) WebGL WebHID API (en-US) WebRTC WebVR API WebVTT WebXR Device API Websockets API X XMLHttpRequest","categories":[],"tags":[]},{"title":"拖放 Drag and Drop","slug":"yuque/拖放 Drag and Drop","date":"2021-12-25T09:52:47.000Z","updated":"2022-01-08T10:13:59.608Z","comments":true,"path":"yuque/拖放 Drag and Drop/","link":"","permalink":"https://oocii.com/yuque/%E6%8B%96%E6%94%BE%20Drag%20and%20Drop/","excerpt":"","text":"事件 On 型事件处理程序 触发时刻 drag (en-US) ondrag 当拖拽元素或选中的文本时触发。 dragend (en-US) ondragend(en-US) 当拖拽操作结束时触发 (比如松开鼠标按键或敲 “Esc” 键). (见结束拖拽 (en-US) ) dragenter (en-US) ondragenter(en-US) 当拖拽元素或选中的文本到一个可释放目标时触发（见 指定释放目标 (en-US) ）。 dragexit ondragexit(en-US) 当元素变得不再是拖拽操作的选中目标时触发。 dragleave (en-US) ondragleave 当拖拽元素或选中的文本离开一个可释放目标时触发。 dragover (en-US) ondragover(en-US) 当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）。 dragstart (en-US) ondragstart(en-US) 当用户开始拖拽一个元素或选中的文本时触发（见开始拖拽操作 (en-US) ）。 drop (en-US) ondrop 当元素或选中的文本在可释放目标上被释放时触发（见执行释放 (en-US) ）。","categories":[],"tags":[]},{"title":"同步3","slug":"yuque/同步3","date":"2021-12-24T04:01:06.000Z","updated":"2022-01-08T10:13:59.611Z","comments":true,"path":"yuque/同步3/","link":"","permalink":"https://oocii.com/yuque/%E5%90%8C%E6%AD%A53/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"同步2","slug":"yuque/同步2","date":"2021-12-23T05:29:10.000Z","updated":"2022-01-08T10:13:59.614Z","comments":true,"path":"yuque/同步2/","link":"","permalink":"https://oocii.com/yuque/%E5%90%8C%E6%AD%A52/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Array.prototype.sort() 方法在不同浏览器间的实现差异","slug":"yuque/Array.prototype.sort() 方法在不同浏览器间的实现差异","date":"2021-12-23T02:44:51.000Z","updated":"2022-01-08T10:13:59.684Z","comments":true,"path":"yuque/Array.prototype.sort() 方法在不同浏览器间的实现差异/","link":"","permalink":"https://oocii.com/yuque/Array.prototype.sort()%20%E6%96%B9%E6%B3%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%B4%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%B7%AE%E5%BC%82/","excerpt":"","text":"Array.prototype.sort () 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的 由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。 # 语法 arr.sort([compareFunction]);# 参数 compareFunction 可选 用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的 Unicode 位点进行排序。 firstEl 第一个用于比较的元素。 secondEl 第二个用于比较的元素。 返回值 排序后的数组。请注意，数组已原地排序，并且不进行复制。 # 描述 如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 &quot;Banana&quot; 会被排列到 &quot;cherry&quot; 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 &quot;80&quot; 要比 &quot;9&quot; 要靠前。 如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素： 如果 compareFunction (a, b) 小于 0 ，那么 a 会被排列到 b 之前； 如果 compareFunction (a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）； 如果 compareFunction (a, b) 大于 0 ， b 会被排列到 a 之前。 compareFunction (a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。 所以，比较函数格式如下： function compare(a, b) &#123; if (a &lt; b) &#123; // 按某种排序标准进行比较，a 小于 b return -1; &#125; if (a > b) &#123; return 1; &#125; // a must be equal to b return 0;&#125;以上是 MDN 上面的说明，但至于各浏览器的具体的实现是没有的. # 浏览器对 compareFunction 参数处理的差异 var numbers = [4, 2, 5, 1, 3];numbers.sort(function (a, b) &#123; return a - b;&#125;);console.log(numbers);直观感觉上 compareFunction 的 a, b 参数应该是，a === numbers [n], b === numbers [n + 1], 但实际上不同浏览器的处理方式却不同，以下是 Chrome 和 Firefox 的处理结果: Chrome [1, 2, 3, 4, 5].sort((a, b) => &#123; console.log(a, b);&#125;);// 2 1// 3 2// 4 3// 5 4Firefox [1, 2, 3, 4, 5].sort((a, b) => &#123; console.log(a, b);&#125;);// 1 2// 2 3// 3 4// 4 5由上面结果可以看到，Chrome 和 Firefox compareFunction 的入参方式完全相反. 这是因为 ES 标准 没有规范 compareFunction 传入的参数到底该是什么顺序和算法，只是制定 compareFunction 两数之间的比较规则，就是上面提到的： 如果 compareFunction (a, b) 小于 0 ，那么 a 会被排列到 b 之前； 如果 compareFunction (a, b) 等于 0 ， a 和 b 的相对位置不变。 如果 compareFunction (a, b) 大于 0 ， b 会被排列到 a 之前。 明确定义规则后，不管 a, b 两个数传进来的顺序如何，只在乎它们两数的排序关系。这就解释了为什么同样的 compareFunction 下，尽管不同浏览器接受的参数不一样，还是能排序出一样的结果。 参考资料: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort https://tc39.es/ecma262/#sec-array.prototype.sort","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://oocii.com/categories/JavaScript/"},{"name":"Array","slug":"JavaScript/Array","permalink":"https://oocii.com/categories/JavaScript/Array/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://oocii.com/tags/ES/"},{"name":"Array","slug":"Array","permalink":"https://oocii.com/tags/Array/"}]},{"title":"同步A","slug":"yuque/同步A","date":"2021-12-23T02:44:19.000Z","updated":"2022-01-08T10:13:59.687Z","comments":true,"path":"yuque/同步A/","link":"","permalink":"https://oocii.com/yuque/%E5%90%8C%E6%AD%A5A/","excerpt":"","text":"A","categories":[],"tags":[]}],"categories":[{"name":"testtag","slug":"testtag","permalink":"https://oocii.com/categories/testtag/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://oocii.com/categories/JavaScript/"},{"name":"CSS","slug":"CSS","permalink":"https://oocii.com/categories/CSS/"},{"name":"formatting context","slug":"CSS/formatting-context","permalink":"https://oocii.com/categories/CSS/formatting-context/"},{"name":"Array","slug":"JavaScript/Array","permalink":"https://oocii.com/categories/JavaScript/Array/"}],"tags":[{"name":"tags1","slug":"tags1","permalink":"https://oocii.com/tags/tags1/"},{"name":"tags2","slug":"tags2","permalink":"https://oocii.com/tags/tags2/"},{"name":"img","slug":"img","permalink":"https://oocii.com/tags/img/"},{"name":"Javascript","slug":"Javascript","permalink":"https://oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://oocii.com/tags/ES/"},{"name":"CSS","slug":"CSS","permalink":"https://oocii.com/tags/CSS/"},{"name":"BFC","slug":"BFC","permalink":"https://oocii.com/tags/BFC/"},{"name":"Array","slug":"Array","permalink":"https://oocii.com/tags/Array/"}]}