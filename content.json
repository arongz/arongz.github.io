{"meta":{"title":"寺木的博客","subtitle":"“任何技术和语言，都只是工具，工具的唯一目的就是把东西做出来，不要因为熟练使用某个工具而沾沾自喜，躲在舒适圈不出来。”","description":"“任何技术和语言，都只是工具，工具的唯一目的就是把东西做出来，不要因为熟练使用某个工具而沾沾自喜，躲在舒适圈不出来。”","author":"Az","url":"https://www.oocii.com","root":"/"},"pages":[{"title":"categories","date":"2022-01-06T11:13:01.000Z","updated":"2022-01-07T01:57:57.204Z","comments":true,"path":"categories/index.html","permalink":"https://www.oocii.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-01-06T10:30:19.000Z","updated":"2022-01-07T01:57:42.109Z","comments":true,"path":"tags/index.html","permalink":"https://www.oocii.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"DOM Node 和 Element 有什么区别？","slug":"yuque/DOM Node 和 Element 有什么区别？","date":"2022-01-21T10:45:26.000Z","updated":"2022-09-27T11:29:42.404Z","comments":true,"path":"yuque/DOM Node 和 Element 有什么区别？/","link":"","permalink":"https://www.oocii.com/yuque/DOM%20Node%20%E5%92%8C%20Element%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/","excerpt":"","text":"文档对象模型 (DOM) 是将 HTML 或 XML 文档视为树结构的接口，其中每个节点都是文档的一个对象。DOM 还提供了一组方法来查询树、改变结构、样式。DOM 还使用术语element : 与节点非常相似。那么，DOM 节点和元素有什么区别呢？ 1.DOM Node 节点理解节点和元素之间区别的关键是理解节点是什么。从更高的角度来看，DOM 文档由节点的层次结构组成。每个节点可以有一个父节点和/或子节点。我们看一下下面的 HTML 文档： &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Page Body --&gt; &lt;h2&gt;My Page&lt;/h2&gt; &lt;p id=&quot;content&quot;&gt;Thank you for visiting my web page!&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 该文档包含以下节点层次结构： 是文档树中的一个节点。它有 2 个子节点：和节点。 也是一个具有 3 个子节点的节点：评论、标题和段落。节点的父节点是节点。 HTML 文档中的标签代表一个节点，有趣的是常规文本也是一个节点。段落节点有 1 个子节点：文本节点\"Thank you for visiting my web page!\"。 1.2 节点类型如何区分这些不同类型的节点？答案在于 DOM Node接口，尤其是 Node.nodeType 属性。Node.nodeType 可以具有以下表示节点类型的值之一： Node.ELEMENT_NODE Node.ATTRIBUTE_NODE Node.TEXT_NODE Node.CDATA_SECTION_NODE Node.PROCESSING_INSTRUCTION_NODE Node.COMMENT_NODE Node.DOCUMENT_NODE Node.DOCUMENT_TYPE_NODE Node.DOCUMENT_FRAGMENT_NODE Node.NOTATION_NODE 常量有意义地指示节点类型：例如 Node.ELEMENT_NODE 表示元素节点、Node.TEXT_NODE 表示文本节点、Node.DOCUMENT_NODE 文档节点等。例如，让我们选择段落节点，并查看其 nodeType 属性：const paragraph = document.querySelector(‘p’);paragraph.nodeType === Node.ELEMENT_NODE; // =&gt; true正如预期 paragraph.nodeType 的那样，有值 Node.ELEMENT_NODE，表明该段落是一个元素。该段落还包含一个文本节点：const paragraph = document.querySelector(‘p’);const firstChild = paragraph.childNodes[0];firstChild.nodeType === Node.TEXT_NODE; // =&gt; true有一个节点类型表示整个节点的文档树 - Node.DOCUMENT_NODE：document.nodeType === Node.DOCUMENT_NODE; // =&gt; true 2.DOM Element 元素了解 DOM 节点是什么之后，现在就是区分 DOM 节点和元素的时候了。如果你理解了节点术语，那么答案就很明显了：元素是特定类型的节点——元素 ( Node.ELEMENT_NODE)。以及文档、评论、文本等类型。简单来说，元素是使用 HTML 文档中的标记编写的节点。, , , , ,都是元素，因为它们是由标签表示的。文档类型、注释、文本节点不是元素，因为它们不是用标签编写的： &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;!-- Page Body --&gt; &lt;p&gt;Thank you for visiting my web page!&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Node 是节点 HTMLElement 的构造函数，是 JavaScript DOM 中元素的构造函数。一个段落，是一个节点，并且还一个元素，既是的一个实例 Node 和 HTMLElement：const paragraph = document.querySelector(‘p’);paragraph instanceof Node; // =&gt; trueparagraph instanceof HTMLElement; // =&gt; true简单地说，元素是节点的子类型，就像猫是动物的子类型一样。 3.DOM 属性：节点和元素除了区分节点和元素之外，您还需要区分仅包含节点或仅包含元素的 DOM 属性。以下 Node 类型的属性计算为一个节点或节点集合 ( NodeList)：node.parentNode; // Node or nullnode.firstChild; // Node or nullnode.lastChild; // Node or nullnode.childNodes; // NodeList但是，以下属性是元素或元素集合 ( HTMLCollection)：node.parentElement; // HTMLElement or nullnode.children; // HTMLCollection既然两者都 node.childNodes 返回 node.children 一个子列表，为什么这两个属性都有呢？好问题！考虑以下包含一些文本的段落元素： &lt;p&gt; &lt;b&gt;Thank you&lt;/b&gt; for visiting my web page! &lt;/p&gt; 打开demo，然后查看 parapgraph 节点的 childNodes 和属性：childrenconst paragraph = document.querySelector(‘p’);paragraph.childNodes; // NodeList: [HTMLElement, Text]paragraph.children; // HTMLCollection: [HTMLElement]paragraph.childNodes 集合包含 2 个节点：粗体元素Thank you，以及文本节点 for visiting my web page!。但是，paragraph.children 集合仅包含一项：粗体元素Thank you。因为 paragraph.children 只包含元素，所以这里没有包含文本节点，因为它的类型是文本 ( Node.TEXT_NODE)，而不是元素 ( Node.ELEMENT_NODE)。同时拥有 node.childNodes 并 node.children 让您选择要访问的子节点的集合：所有子节点或只有子节点是元素。 4.总结DOM 文档是节点的分层集合。每个节点可以有一个父节点和/或子节点。如果您了解节点是什么，就很容易理解 DOM 节点和元素之间的区别。节点有类型，元素类型就是其中之一。该元素由 HTML 文档中的标记表示。 测验：什么类型的节点永远没有父节点？","categories":[{"name":"DOM","slug":"DOM","permalink":"https://www.oocii.com/categories/DOM/"}],"tags":[{"name":"dom","slug":"dom","permalink":"https://www.oocii.com/tags/dom/"},{"name":"node","slug":"node","permalink":"https://www.oocii.com/tags/node/"},{"name":"element","slug":"element","permalink":"https://www.oocii.com/tags/element/"}]},{"title":"Date","slug":"yuque/Date","date":"2022-01-10T06:32:30.000Z","updated":"2022-09-27T11:29:42.442Z","comments":true,"path":"yuque/Date/","link":"","permalink":"https://www.oocii.com/yuque/Date/","excerpt":"","text":"语法：new Date(); new Date(value); new Date(dateString); new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]); 参数Date() 构造函数有四种基本形式 1. 没有参数如果没有提供参数，那么新创建的 Date 对象表示实例化时刻的日期和时间。 2. Unix 时间戳value一个 Unix 时间戳（Unix Time Stamp），它是一个整数值，表示自 1970 年 1 月 1 日 00:00:00 UTC（the Unix epoch）以来的毫秒数，忽略了闰秒。请注意大多数 Unix 时间戳功能仅精确到最接近的秒。 3. 时间戳字符串dateString表示日期的字符串值。该字符串应该能被 Date.parse() 正确方法识别（即符合 IETF-compliant RFC 2822 timestamps 或 version of ISO8601）。注意: 由于浏览器之间的差异与不一致性，强烈不推荐使用 Date 构造函数来解析日期字符串 (或使用与其等价的 Date.parse)。对 RFC 2822 格式的日期仅有约定俗成的支持。 对 ISO 8601 格式的支持中，仅有日期的串 (例如 “1970-01-01”) 会被处理为 UTC 而不是本地时间，与其他格式的串的处理不同。** 如下：同一操作系统不同浏览器对字符串的解析都有所差异：** Chrome: new Date(&quot;2021-1-16&quot;); // Sat Jan 16 2021 00:00:00 GMT+0800 (中国标准时间) new Date(&quot;2021-01-16&quot;); // Sat Jan 16 2021 08:00:00 GMT+0800 (中国标准时间) FireFox; new Date(&quot;2021/1/16&quot;); // Sat Jan 16 2021 00:00:00 GMT+0800 (中国标准时间) new Date(&quot;2021/01/16&quot;); // Sat Jan 16 2021 00:00:00 GMT+0800 (中国标准时间) // .replace(&#39;-&#39;, &#39;/&#39;) 防止各浏览器差异 2021-1-16 解析成UTC,GMT的坑 dateRange.firstTime = dateRange.firstTime.replace(/\\-/g, &quot;/&quot;); dateRange.endTime = dateRange.endTime.replace(/\\-/g, &quot;/&quot;); // iOS某些系统版本的坑, 以上两行replace不能直接放在以下new Date() 里面 let firstTime = new Date(dateRange.firstTime).valueOf(); let endTime = new Date(dateRange.endTime).valueOf(); 4. 分别提供日期与时间的每一个成员当至少提供了年份与月份时，这一形式的 Date() 返回的 Date 对象中的每一个成员都来自下列参数。没有提供的成员将使用最小可能值（对日期为 1，其他为 0）。year表示年份的整数值。 0 到 99 会被映射至 1900 年至 1999 年，其它值代表实际年份。参见 示例。monthIndex (年月日中这个值比较特别)表示月份的整数值，从 0（1 月）到 11（12 月）。date 可选表示一个月中的第几天的整数值，从 1 开始。默认值为 1。hours 可选表示一天中的小时数的整数值 (24 小时制)。默认值为 0（午夜）。minutes 可选表示一个完整时间（如 01:10:00）中的分钟部分的整数值。默认值为 0。seconds 可选表示一个完整时间（如 01:10:00）中的秒部分的整数值。默认值为 0。milliseconds 可选表示一个完整时间的毫秒部分的整数值。默认值为 0。 一些比较有用的技巧或坑点： 将 date 参数设置为 0 可得到上个月的最后一天, 在做日历的时候非常有用. // new Date(2022, 1, 1) // 2022/2/1 new Date(2022, 1, 0); // 2022/1/31 const range = function (n: number) &#123; return Array(n) .fill(0) .map((_, index) =&gt; index); &#125;; const getPrevMonthLastDays = (date: Date, amount: number) =&gt; &#123; if (amount &lt;= 0) &#123; return []; &#125; const tempDate = new Date(date.getTime()); tempDate.setDate(0); const year = tempDate.getFullYear(); const month = tempDate.getMonth(); const lastDay = tempDate.getDate(); return range(amount).map((_, index: number) =&gt; (&#123; year, month, date: lastDay - (amount - index - 1), &#125;)); &#125;; 调用 Date 对象的 set 方法（setDate()，setFullYear()_…）返回时间戳数字 如： _177610530000","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.oocii.com/categories/JavaScript/"},{"name":"Standard built-in objects","slug":"JavaScript/Standard-built-in-objects","permalink":"https://www.oocii.com/categories/JavaScript/Standard-built-in-objects/"},{"name":"Date","slug":"JavaScript/Standard-built-in-objects/Date","permalink":"https://www.oocii.com/categories/JavaScript/Standard-built-in-objects/Date/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://www.oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://www.oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://www.oocii.com/tags/ES/"},{"name":"date","slug":"date","permalink":"https://www.oocii.com/tags/date/"},{"name":"timestamp","slug":"timestamp","permalink":"https://www.oocii.com/tags/timestamp/"}]},{"title":"Tags..9","slug":"yuque/Tags..9","date":"2022-01-06T10:24:25.000Z","updated":"2022-09-27T11:29:42.451Z","comments":true,"path":"yuque/Tags..9/","link":"","permalink":"https://www.oocii.com/yuque/Tags..9/","excerpt":"some description","text":"some description more detail","categories":[],"tags":[{"name":"img","slug":"img","permalink":"https://www.oocii.com/tags/img/"}]},{"title":"JavaScript","slug":"yuque/JavaScript","date":"2022-01-05T03:18:49.000Z","updated":"2022-09-27T11:29:42.454Z","comments":true,"path":"yuque/JavaScript/","link":"","permalink":"https://www.oocii.com/yuque/JavaScript/","excerpt":"","text":"","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.oocii.com/categories/JavaScript/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://www.oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://www.oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://www.oocii.com/tags/ES/"}]},{"title":"CSS_display_属性值分类","slug":"yuque/CSS_display_属性值分类","date":"2022-01-04T12:15:39.000Z","updated":"2022-09-27T11:29:42.515Z","comments":true,"path":"yuque/CSS_display_属性值分类/","link":"","permalink":"https://www.oocii.com/yuque/CSS_display_%E5%B1%9E%E6%80%A7%E5%80%BC%E5%88%86%E7%B1%BB/","excerpt":"","text":"display 属性可以设置元素的内部和外部显示类型 _display types_。元素的外部显示类型 outer display types 将决定该元素在流式布局中的表现（块级或内联元素）；元素的内部显示类型 inner display types 可以控制其子元素的布局（例如：flow layout，grid 或 flex）。在 CSS 规范（特指 CSS Level 1/2/3 规范）中查阅 display 属性的所有取值时需要注意：个别取值的详细信息记录在独立的规范中。 例如，display: flex 的详细信息在 CSS Flexible Box Model 规范中记录。可以在本文档末尾的表格中查看所有有关的规范。 语法display 属性使用关键字取值来指定，关键字取值被分为六类： .container &#123; display: [ &lt;display-outside&gt; | &lt;display-inside&gt; ] | &lt;display-listitem&gt; | &lt;display-internal&gt; | &lt;display-box&gt; | &lt;display-legacy&gt;; &#125; Outside这些关键字指定了元素的外部显示类型，实际上就是其在流式布局中的角色（即在流式布局中的表现）。‘page(“/zh-CN/docs/Web/CSS/display-outside”, “Syntax”)’ 的可用值：block这个值会生成一个块级元素盒子，同时在该元素之前和之后打断（换行）。简单来说就是，这个值会将该元素变成块级元素。inline这个值会生成一个行内元素盒子，该元素之前和之后不会打断（换行）。如果空间充足，该元素后的元素将会在同一行显示。简单来说就是，这个值会将该元素变成行内元素。**run-in **这个值生成一个 run-in 盒子。如果其后的兄弟元素是块级盒子，那么这个 run-in 盒子就会以兄弟元素的第一个行内元素盒子的形式存在；如果其后的兄弟元素是行内元素，那么这个 run-in 盒子会变成块级元素。run-in 元素的存在形式取决于相邻的元素，如果它的内部存在 block box，那么它会变成块级元素盒子。 Inside(en-US)这些关键字指定了元素的内部显示类型，它们定义了该元素内部内容的布局方式（假定该元素为非替换元素 non-replaced element）。‘page(“/zh-CN/docs/Web/CSS/display-inside”, “Syntax”)’的可用值：**flow **该元素使用流布局（块和内联布局）来布置其内容。如果它的外部显示类型是 inline 或 run-in，并且它正在参与块或内联格式上下文，那么它会生成一个内联框。否则它会生成一个块容器框。根据其他属性（例如position、float、 或overflow）的值以及它本身是否参与块或内联格式化上下文，它要么为其内容建立新的块格式化上下文(BFC)，要么将其内容集成到其父格式化中语境。flow-root该元素生成一个块元素框，它建立一个新的块格式上下文，定义格式根所在的位置。table这些元素的行为类似于 HTML元素。它定义了一个块级框。flex该元素的行为类似于块元素，并根据flexbox 模型布置其内容。grid该元素的行为类似于块元素，并根据网格模型布置其内容。**ruby **该元素的行为类似于内联元素，并根据 ruby 格式模型布置其内容。它的行为类似于相应的 HTML元素。 List Item(en-US)将这个元素的外部显示类型变为 block 盒，并将内部显示类型变为多个 list-item inline 盒。‘page(“/zh-CN/docs/Web/CSS/display-listitem”, “Syntax”)’ Internal有些布局模型（如 table 和 ruby）有着复杂的内部结构，因此它们的子元素可能扮演着不同的角色。这一类关键字就是用来定义这些“内部”显示类型，并且只有在这些特定的布局模型中才有意义。Valid values:table-row-groupThese elements behave like HTML elements.table-header-groupThese elements behave like HTML elements.table-footer-groupThese elements behave like HTML elements.table-rowThese elements behave like HTML elements.table-cellThese elements behave like HTML elements.table-column-groupThese elements behave like HTML elements.table-columnThese elements behave like HTML elements.table-captionThese elements behave like HTML elements.**ruby-base **These elements behave like HTML elements.**ruby-text **These elements behave like HTML elements.**ruby-base-container **These elements behave like HTML elements generated as anonymous boxes.**ruby-text-container **These elements behave like HTML elements. Box这些值决定元素是否使用盒模型。Valid values:contentsThese elements don’t produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. Please note that the CSS Display Level 3 spec defines how the contents value should affect “unusual elements” — elements that aren’t rendered purely by CSS box concepts such as replaced elements. See Appendix B: Effects of display: contents on Unusual Elements for more details.Due to a bug in browsers this will currently remove the element from the accessibility tree — screen readers will not look at what’s inside. See the Accessibility concerns section below for more details.noneTurns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off. To have an element take up the space that it would normally take, but without actually rendering anything, use the visibility property instead. LegacyCSS 2 对于 display 属性使用单关键字语法，对于相同布局模式的 block 级和 inline 级变体需要使用单独的关键字。‘page(“/en-US /docs/Web/CSS/display-legacy”, “Syntax”)’ 是否该继续使用 Legacy 取值？CSS Level 3 规范详细说明了 display 属性的两类取值——显式地指定了外部和内部显示属性的规范——但是还没有被浏览器广泛支持。 方法允许使用单个关键字达到相同效果，开发者应该在双关键字取值被广泛支持之前采用这个方法。举例来说，你可以这样指定 inline flex 容器：.container { display: inline-flex; }Copy to Clipboard也可以用两个关键字来指定。Copy to Clipboard.container { display: inline flex; }有关规范变更的更多信息，查阅文章 Adapting to the new two-value syntax of display (en-US)。 全局设置 /_ Global values _/ display: inherit; display: initial; display: unset;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/tags/CSS/"}]},{"title":"块格式化上下文 Block formatting context(BFC)","slug":"default/块格式化上下文 Block formatting context(BFC)","date":"2021-12-30T07:03:01.000Z","updated":"2022-01-10T11:49:40.378Z","comments":true,"path":"default/块格式化上下文 Block formatting context(BFC)/","link":"","permalink":"https://www.oocii.com/default/%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87%20Block%20formatting%20context(BFC)/","excerpt":"","text":"block formatting contexts 是 formatting contexts 格式化上下文的概念之一，formatting contexts 其中有几种类型，包括块格式化上下文 block formatting contexts、内联格式化上下文 inline formatting contexts 和灵活格式化上下文 flex formatting contexts。​ 块格式化上下文（Block formatting context，BFC） 是 Web 页面的可视 CSS 渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。​ 文档最外层元素使用块布局规则或称为初始块格式上下文。这意味着元素块中的每个元素都是按照正常流程遵循块和内联布局规则进行布局的。参与 BFC 的元素使用 CSS 框模型概述的规则，该模型定义了元素的边距、边框和填充如何与同一上下文中的其他块交互。 创建新的块格式上下文 元素不是唯一能够创建块格式上下文的元素。默认为块布局的任何元素也会为其后代元素创建块格式上下文。此外，还有一些CSS属性可以使元素创建一个BFC，即使默认情况下它不这样做。 以下方式会创建**块格式化上下文**： 根元素（） 浮动元素（元素的 float 不是 none） 绝对定位元素（元素的 position 为 absolute 或 fixed） 行内块元素（元素的 display 为 inline-block） 表格单元格（元素的 display 为 table-cell，HTML 表格单元格默认为该值） 表格标题（元素的 display 为 table-caption，HTML 表格标题默认为该值） 匿名表格单元格元素（元素的 display 为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是 HTML table、row、tbody、thead、tfoot 的默认属性）或 inline-table） overflow 计算值(Computed)不为 visible 的块元素 display 值为 flow-root 的元素 contain 值为 layout、content 或 paint 的元素 弹性元素（display 为 flex 或 inline-flex 元素的直接子元素） 网格元素（display 为 grid 或 inline-grid 元素的直接子元素） 多列容器（元素的 column-count 或 column-width(en-US) 不为 auto，包括 column-count 为 1） column-span 为 all 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。 BFC 创建例子让我们看看几个例子，来理解创建 BFC 的效果。在下面的示例中，我们在应用了边框的 中有一个浮动元素。该 div 的内容与浮动元素一起浮动。由于 float 的内容比它旁边的内容高，所以现在 DIV 的边框贯穿了 float。如流入和流出元素指南guide to in-flow and out of flow elements中所述，浮动已脱离文档流，因此 DIV 的背景和边框仅包含内容，而不包含浮动。创建一个新的 BFC 将包含该浮动。在过去，一种典型的方法是设置 overflow: auto 或设置其他不是 overflow: visible 的值。设置 overflow: auto 会自动创建包含浮动的新 BFC。现在，我们的 DIV 在布局中变成了一个迷你布局。任何子元素都将包含在其中。使用 overflow 创建新的 BFC 的问题在于， overflow 属性用于告诉浏览器您希望如何处理溢出的内容。在某些情况下，当您纯粹使用此属性创建 BFC 时，您会发现不需要的滚动条或剪切阴影。另外，对于未来的开发人员来说，它可能不太可读，因为不能显式地表明为什么要使用溢出来实现这一目的。如果您使用了这个方法，最好对代码进行注释以便他人理解。​ 使用 display:flow-root 显式创建 BFC使用 display: flow-root （或 display: flow-root list-item）将创建一个新的 BFC，而不会产生任何其他潜在的问题副作用。使用 上的 display: flow-root ，该容器内的所有内容都参与该容器的块格式上下文，并且浮动不会从元素底部弹出。flow-root 关键字的意义是，创建的内容本质上类似于一个新的根元素（如 所做），并确定这个新的上下文如何创建及其流布局如何实现。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/categories/CSS/"},{"name":"formatting context","slug":"CSS/formatting-context","permalink":"https://www.oocii.com/categories/CSS/formatting-context/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/tags/CSS/"},{"name":"BFC","slug":"BFC","permalink":"https://www.oocii.com/tags/BFC/"}]},{"title":"DOM","slug":"yuque/DOM","date":"2021-12-25T10:04:40.000Z","updated":"2022-09-27T11:29:42.529Z","comments":true,"path":"yuque/DOM/","link":"","permalink":"https://www.oocii.com/yuque/DOM/","excerpt":"","text":"文档对象模型 (DOM) 将 web 页面与到脚本或编程语言连接起来。通常是指 JavaScript，但将 HTML、SVG 或 XML 文档建模为对象并不是 JavaScript 语言的一部分。DOM 模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM 的方法(methods)让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。 DOM 接口 Attr CharacterData ChildNode Comment CustomEvent Document DocumentFragment DocumentType DOMError DOMException DOMImplementation DOMString DOMTimeStamp DOMSettableTokenList DOMStringList DOMTokenList Element Event EventTarget HTMLCollection MutationObserver MutationRecord Node NodeFilter NodeIterator NodeList ParentNode ProcessingInstruction(en-US) Promise(en-US) PromiseResolver(en-US) Range Text TreeWalker URL Window Worker XMLDocument","categories":[],"tags":[]},{"title":"Web APIs","slug":"yuque/Web APIs","date":"2021-12-25T10:00:56.000Z","updated":"2022-09-27T11:29:42.766Z","comments":true,"path":"yuque/Web APIs/","link":"","permalink":"https://www.oocii.com/yuque/Web%20APIs/","excerpt":"","text":"在使用 JavaScript 编写 Web 代码时，有许多 Web API 可供调用。下面是开发 Web 应用程序或网站时可能使用的所有 API 和接口（对象类型）的列表。Web API 主要用于 JavaScript，但也可能有例外。 规范这是一个所有可用 API 的列表。B Background Fetch API Background Tasks Barcode Detection API Battery API Beacon Bluetooth API Broadcast Channel API C CSS Counter Styles CSS Font Loading API CSS Painting API CSS Typed Object Model API CSSOM Canvas API Channel Messaging API Clipboard API Console API Contact Picker API Content Index API Credential Management API D DOM E Encoding API Encrypted Media Extensions EyeDropper API F Fetch API File System Access API File and Directory Entries API Fullscreen API G Gamepad API Geolocation API H HTML DOM HTML Drag and Drop API HTML Sanitizer API High Resolution Time History API I Image Capture API IndexedDB Intersection Observer API L Layout Instability API Long Tasks API M Media Capabilities API Media Capture and Streams Media Session API Media Source Extensions MediaStream Recording N Navigation Timing Network Information API P Page Visibility API Payment Request API Performance API Performance Timeline API Periodic Background Sync Permissions API Picture-in-Picture API Pointer Events Pointer Lock API Presentation API Proximity Events Push API R Resize Observer API Resource Timing API S Screen Capture API Screen Orientation API Screen Wake Lock API Sensor API Server Sent Events Service Workers API Storage Storage Access API Streams T Touch Events U URL API URL Pattern API V Vibration API Visual Viewport W Web Animations Web Audio API Web Authentication API Web Crypto API Web MIDI API Web Notifications Web Share API Web Speech API Web Storage API Web Workers API WebCodecs API WebGL WebHID API WebRTC WebVR API WebVTT WebXR Device API Websockets API Window Controls Overlay API X XMLHttpRequest [ ](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 接口这是一个所有接口（即对象类型）的列表。A AbortController AbortSignal AbsoluteOrientationSensor (en-US) AbstractRange (en-US) Accelerometer AddressErrors (en-US) AesCbcParams (en-US) AesCtrParams (en-US) AesGcmParams (en-US) AesKeyGenParams (en-US) AmbientLightSensor AnalyserNode ANGLE_instanced_arrays Animation AnimationEffect (en-US) AnimationEvent AnimationPlaybackEvent (en-US) AnimationTimeline ArrayBufferView atob() Attr AudioBuffer AudioBufferSourceNode AudioConfiguration (en-US) AudioContext AudioData (en-US) AudioDecoder (en-US) AudioDestinationNode AudioEncoder (en-US) AudioListener AudioNode AudioParam AudioParamDescriptor AudioParamMap (en-US) AudioProcessingEvent (en-US) AudioScheduledSourceNode AudioTrack AudioTrackList (en-US) AudioWorklet (en-US) AudioWorkletGlobalScope (en-US) AudioWorkletNode AudioWorkletProcessor AuthenticatorAssertionResponse (en-US) AuthenticatorAttestationResponse (en-US) AuthenticatorResponse B BackgroundFetchEvent (en-US) BackgroundFetchManager (en-US) BackgroundFetchRecord (en-US) BackgroundFetchRegistration (en-US) BackgroundFetchUpdateUIEvent (en-US) BarcodeDetector (en-US) BarProp (en-US) BaseAudioContext BatteryManager BeforeInstallPromptEvent BeforeUnloadEvent BiquadFilterNode Blob BlobBuilder BlobEvent (en-US) Bluetooth BluetoothCharacteristicProperties (en-US) BluetoothDevice (en-US) BluetoothRemoteGATTCharacteristic (en-US) BluetoothRemoteGATTDescriptor (en-US) BluetoothRemoteGATTServer (en-US) BluetoothRemoteGATTService (en-US) BluetoothUUID (en-US) BroadcastChannel btoa() BufferSource (en-US) ByteLengthQueuingStrategy (en-US) C Cache caches CacheStorage CanvasCaptureMediaStreamTrack CanvasGradient CanvasImageSource CanvasPattern CanvasRenderingContext2D CaretPosition (en-US) CDATASection ChannelMergerNode ChannelSplitterNode (en-US) CharacterData clearInterval() clearTimeout() Client Clients Clipboard ClipboardEvent ClipboardItem CloseEvent Comment CompositionEvent CompressionStream (en-US) console ConstantSourceNode (en-US) ContactAddress (en-US) ContactsManager (en-US) ContentIndex (en-US) ContentIndexEvent (en-US) ConvolverNode CookieChangeEvent (en-US) CookieStore (en-US) CookieStoreManager (en-US) CountQueuingStrategy (en-US) CrashReportBody (en-US) createImageBitmap() Credential (en-US) CredentialsContainer crossOriginIsolated Crypto CryptoKey CryptoKeyPair (en-US) CSS CSSAnimation (en-US) CSSConditionRule CSSCounterStyleRule (en-US) CSSFontFaceRule (en-US) CSSGroupingRule CSSImageValue (en-US) CSSImportRule (en-US) CSSKeyframeRule (en-US) CSSKeyframesRule (en-US) CSSKeywordValue (en-US) CSSMathInvert (en-US) CSSMathMax (en-US) CSSMathMin (en-US) CSSMathNegate (en-US) CSSMathProduct (en-US) CSSMathSum CSSMathValue (en-US) CSSMatrixComponent (en-US) CSSMediaRule CSSNamespaceRule (en-US) CSSNumericArray (en-US) CSSNumericValue (en-US) CSSOMString (en-US) CSSPageRule CSSPerspective (en-US) CSSPositionValue (en-US) CSSPrimitiveValue (en-US) CSSPropertyRule (en-US) CSSPseudoElement (en-US) CSSRotate (en-US) CSSRule CSSRuleList CSSScale (en-US) CSSSkew (en-US) CSSSkewX (en-US) CSSSkewY (en-US) CSSStyleDeclaration CSSStyleRule CSSStyleSheet CSSStyleValue (en-US) CSSSupportsRule CSSTransformComponent (en-US) CSSTransformValue (en-US) CSSTransition (en-US) CSSTranslate (en-US) CSSUnitValue (en-US) CSSUnparsedValue (en-US) CSSValue CSSValueList CSSVariableReferenceValue (en-US) CustomElementRegistry CustomEvent CustomStateSet (en-US) D DataTransfer DataTransferItem DataTransferItemList DecompressionStream (en-US) DedicatedWorkerGlobalScope DelayNode (en-US) DeprecationReportBody (en-US) DeviceMotionEvent DeviceMotionEventAcceleration DeviceMotionEventRotationRate (en-US) DeviceOrientationEvent DeviceProximityEvent DirectoryEntrySync (en-US) DirectoryReaderSync (en-US) Document DocumentFragment DocumentTimeline (en-US) DocumentType DOMError DOMException DOMHighResTimeStamp DOMImplementation DOMMatrix(WebKitCSSMatrix) DOMMatrixReadOnly (en-US) DOMParser DOMPoint DOMPointReadOnly (en-US) DOMQuad DOMRect DOMRectReadOnly DOMString DOMStringList DOMStringMap DOMTimeStamp DOMTokenList DragEvent DynamicsCompressorNode E EcdhKeyDeriveParams (en-US) EcdsaParams (en-US) EcKeyGenParams (en-US) EcKeyImportParams (en-US) Element ElementInternals (en-US) EncodedAudioChunk (en-US) EncodedVideoChunk (en-US) EpochTimeStamp (en-US) ErrorEvent Event EventListener EventSource EventTarget EXT_blend_minmax (en-US) EXT_color_buffer_float (en-US) EXT_color_buffer_half_float (en-US) EXT_disjoint_timer_query (en-US) EXT_float_blend EXT_frag_depth (en-US) EXT_shader_texture_lod (en-US) EXT_sRGB (en-US) EXT_texture_compression_bptc (en-US) EXT_texture_compression_rgtc (en-US) EXT_texture_filter_anisotropic (en-US) EXT_texture_norm16 (en-US) ExtendableCookieChangeEvent (en-US) ExtendableEvent ExtendableMessageEvent (en-US) EyeDropper (en-US) F FeaturePolicy (en-US) FederatedCredential (en-US) fetch() FetchEvent File FileEntrySync (en-US) FileException FileList FileReader FileReaderSync FileRequest FileSystem FileSystemDirectoryEntry FileSystemDirectoryHandle (en-US) FileSystemDirectoryReader FileSystemEntry FileSystemEntrySync (en-US) FileSystemFileEntry FileSystemFileHandle (en-US) FileSystemHandle (en-US) FileSystemSync FileSystemWritableFileStream (en-US) FocusEvent FontFace FontFaceSet FontFaceSetLoadEvent (en-US) FormData FormDataEntryValue (en-US) FormDataEvent (en-US) G GainNode Gamepad GamepadButton GamepadEvent GamepadHapticActuator (en-US) GamepadPose Geolocation GeolocationCoordinates GeolocationPosition GeolocationPositionError GestureEvent getCandidateWindowClientRect (en-US) GlobalEventHandlers GravitySensor (en-US) Gyroscope (en-US) H HashChangeEvent Headers HID (en-US) HIDConnectionEvent (en-US) HIDDevice (en-US) HIDInputReportEvent (en-US) History HkdfParams (en-US) HmacImportParams (en-US) HmacKeyGenParams (en-US) HMDVRDevice (en-US) HTMLAnchorElement HTMLAreaElement HTMLAudioElement HTMLBaseElement HTMLBaseFontElement HTMLBodyElement HTMLBRElement HTMLButtonElement HTMLCanvasElement HTMLCollection HTMLContentElement HTMLDataElement HTMLDataListElement (en-US) HTMLDetailsElement HTMLDialogElement HTMLDivElement HTMLDListElement (en-US) HTMLDocument HTMLElement HTMLEmbedElement (en-US) HTMLFieldSetElement HTMLFontElement (en-US) HTMLFormControlsCollection (en-US) HTMLFormElement HTMLFrameSetElement (en-US) HTMLHeadElement HTMLHeadingElement (en-US) HTMLHRElement (en-US) HTMLHtmlElement HTMLIFrameElement HTMLImageElement HTMLInputElement HTMLKeygenElement (en-US) HTMLLabelElement HTMLLegendElement (en-US) HTMLLIElement HTMLLinkElement HTMLMapElement (en-US) HTMLMarqueeElement (en-US) HTMLMediaElement HTMLMenuElement (en-US) HTMLMenuItemElement (en-US) HTMLMetaElement (en-US) HTMLMeterElement (en-US) HTMLModElement (en-US) HTMLObjectElement (en-US) HTMLOListElement (en-US) HTMLOptGroupElement HTMLOptionElement HTMLOptionsCollection (en-US) HTMLOutputElement (en-US) HTMLParagraphElement HTMLParamElement (en-US) HTMLPictureElement (en-US) HTMLPreElement (en-US) HTMLProgressElement HTMLQuoteElement (en-US) HTMLScriptElement HTMLSelectElement HTMLShadowElement (en-US) HTMLSlotElement HTMLSourceElement (en-US) HTMLSpanElement HTMLStyleElement HTMLTableCaptionElement (en-US) HTMLTableCellElement (en-US) HTMLTableColElement (en-US) HTMLTableElement HTMLTableRowElement HTMLTableSectionElement (en-US) HTMLTemplateElement HTMLTextAreaElement HTMLTimeElement (en-US) HTMLTitleElement (en-US) HTMLTrackElement (en-US) HTMLUListElement (en-US) HTMLUnknownElement HTMLVideoElement I IDBCursor IDBCursorSync IDBCursorWithValue (en-US) IDBDatabase IDBDatabaseException (en-US) IDBDatabaseSync (en-US) IDBEnvironmentSync (en-US) IDBFactory IDBFactorySync (en-US) IDBIndex IDBIndexSync (en-US) IDBKeyRange IDBLocaleAwareKeyRange (en-US) IDBMutableFile (en-US) IDBObjectStore IDBObjectStoreSync (en-US) IDBOpenDBRequest IDBRequest IDBTransaction IDBTransactionSync (en-US) IDBVersionChangeEvent (en-US) IdleDeadline IdleDetector (en-US) IIRFilterNode (en-US) ImageBitmap ImageBitmapRenderingContext ImageCapture (en-US) ImageData ImageDecoder (en-US) ImageTrack (en-US) ImageTrackList (en-US) indexedDB InputDeviceCapabilities (en-US) InputDeviceInfo (en-US) InputEvent InstallEvent IntersectionObserver IntersectionObserverEntry InterventionReportBody (en-US) isSecureContext K Keyboard KeyboardEvent KeyboardLayoutMap (en-US) KeyframeEffect (en-US) KHR_parallel_shader_compile (en-US) L LargestContentfulPaint (en-US) LayoutShift (en-US) LayoutShiftAttribution (en-US) LinearAccelerationSensor (en-US) LocalFileSystem (en-US) LocalFileSystemSync Location Lock (en-US) LockedFile LockManager (en-US) M Magnetometer (en-US) MathMLElement MediaCapabilities (en-US) MediaConfiguration (en-US) MediaDecodingConfiguration (en-US) MediaDeviceInfo (en-US) MediaDevices MediaElementAudioSourceNode MediaEncodingConfiguration (en-US) MediaError (en-US) MediaImage (en-US) MediaKeyMessageEvent (en-US) MediaKeys (en-US) MediaKeySession MediaKeyStatusMap (en-US) MediaKeySystemAccess (en-US) MediaList MediaMetadata (en-US) MediaQueryList MediaQueryListEvent (en-US) MediaRecorder MediaRecorderErrorEvent (en-US) MediaSession MediaSource MediaStream MediaStreamAudioDestinationNode (en-US) MediaStreamAudioSourceNode MediaStreamEvent MediaStreamTrack MediaStreamTrackAudioSourceNode (en-US) MediaStreamTrackEvent (en-US) MediaStreamTrackGenerator (en-US) MediaStreamTrackProcessor (en-US) MediaTrackConstraints MediaTrackSettings (en-US) MediaTrackSupportedConstraints (en-US) MerchantValidationEvent (en-US) MessageChannel MessageEvent MessagePort Metadata (en-US) MIDIAccess MIDIConnectionEvent MIDIInput (en-US) MIDIInputMap (en-US) MIDIMessageEvent (en-US) MIDIOutput (en-US) MIDIOutputMap (en-US) MIDIPort (en-US) MimeType MimeTypeArray (en-US) MouseEvent MouseScrollEvent msCaching (en-US) msCachingEnabled (en-US) MSCandidateWindowHide (en-US) MSCandidateWindowShow (en-US) MSCandidateWindowUpdate (en-US) msCapsLockWarningOff (en-US) msFirstPaint (en-US) MSGestureEvent (en-US) msGetPropertyEnabled (en-US) msGetRegionContent (en-US) MSGraphicsTrust (en-US) msGraphicsTrustStatus (en-US) msIsBoxed (en-US) MSManipulationEvent (en-US) msPlayToDisabled (en-US) msPlayToPreferredSourceUri (en-US) msPlayToPrimary (en-US) msPlayToSource (en-US) msPutPropertyEnabled (en-US) MSRangeCollection (en-US) msRealTime (en-US) msRegionOverflow (en-US) msSetMediaProtectionManager (en-US) MSSiteModeEvent (en-US) msWriteProfilerMark (en-US) MutationEvent (en-US) MutationObserver MutationRecord N NamedNodeMap NavigationPreloadManager (en-US) Navigator NavigatorUAData (en-US) NDEFMessage (en-US) NDEFReader (en-US) NDEFReadingEvent (en-US) NDEFRecord (en-US) NetworkInformation Node NodeFilter NodeIterator NodeList Notification NotificationEvent NotifyAudioAvailableEvent O OES_element_index_uint (en-US) OES_fbo_render_mipmap (en-US) OES_standard_derivatives (en-US) OES_texture_float (en-US) OES_texture_float_linear (en-US) OES_texture_half_float (en-US) OES_texture_half_float_linear (en-US) OES_vertex_array_object OfflineAudioCompletionEvent (en-US) OfflineAudioContext OffscreenCanvas OrientationSensor (en-US) origin OscillatorNode OTPCredential (en-US) OverconstrainedError (en-US) OVR_multiview2 (en-US) P PageTransitionEvent PaintWorklet (en-US) PannerNode (en-US) PasswordCredential (en-US) Path2D PaymentAddress PaymentMethodChangeEvent (en-US) PaymentRequest (en-US) PaymentRequestEvent (en-US) PaymentRequestUpdateEvent (en-US) PaymentResponse (en-US) PaymentValidationErrors (en-US) Pbkdf2Params (en-US) Performance PerformanceElementTiming (en-US) PerformanceEntry PerformanceEventTiming (en-US) PerformanceLongTaskTiming (en-US) PerformanceMark (en-US) PerformanceMeasure (en-US) PerformanceNavigation PerformanceNavigationTiming PerformanceObserver PerformanceObserverEntryList (en-US) PerformancePaintTiming PerformanceResourceTiming PerformanceServerTiming (en-US) PerformanceTiming PeriodicSyncEvent (en-US) PeriodicSyncManager (en-US) PeriodicWave Permissions PermissionStatus (en-US) PictureInPictureEvent (en-US) PictureInPictureWindow Plugin PluginArray (en-US) Point (en-US) PointerEvent PopStateEvent (en-US) PositionSensorVRDevice (en-US) Presentation (en-US) PresentationAvailability (en-US) PresentationConnection (en-US) PresentationConnectionAvailableEvent (en-US) PresentationConnectionCloseEvent (en-US) PresentationConnectionList (en-US) PresentationReceiver (en-US) PresentationRequest (en-US) ProcessingInstruction (en-US) ProgressEvent PromiseRejectionEvent PublicKeyCredential (en-US) PublicKeyCredentialRequestOptions (en-US) PushEvent (en-US) PushManager PushMessageData PushSubscription (en-US) PushSubscriptionOptions (en-US) Q queueMicrotask() R RadioNodeList (en-US) Range ReadableByteStreamController (en-US) ReadableStream ReadableStreamBYOBReader (en-US) ReadableStreamBYOBRequest (en-US) ReadableStreamDefaultController (en-US) ReadableStreamDefaultReader RelativeOrientationSensor (en-US) RemotePlayback (en-US) Report (en-US) ReportBody (en-US) reportError() (en-US) ReportingObserver (en-US) ReportingObserverOptions (en-US) Request ResizeObserver ResizeObserverEntry ResizeObserverSize (en-US) Response RsaHashedImportParams (en-US) RsaHashedKeyGenParams (en-US) RsaOaepParams (en-US) RsaPssParams (en-US) RTCCertificate (en-US) RTCDataChannel RTCDataChannelEvent (en-US) RTCDtlsTransport (en-US) RTCDTMFSender (en-US) RTCDTMFToneChangeEvent (en-US) RTCError (en-US) RTCErrorEvent (en-US) RTCIceCandidate (en-US) RTCIceCandidatePair (en-US) RTCIceCandidatePairStats (en-US) RTCIceCandidateStats (en-US) RTCIceCredentialType (en-US) RTCIceParameters (en-US) RTCIceRole (en-US) RTCIceServer (en-US) RTCIceTransport (en-US) RTCIceTransportState (en-US) RTCIdentityAssertion (en-US) RTCInboundRtpStreamStats (en-US) RTCNetworkType (en-US) RTCOutboundRtpStreamStats (en-US) RTCPeerConnection RTCPeerConnectionIceErrorEvent (en-US) RTCPeerConnectionIceEvent (en-US) RTCRemoteOutboundRtpStreamStats (en-US) RTCRtcpParameters (en-US) RTCRtpCapabilities (en-US) RTCRtpCodecCapability (en-US) RTCRtpCodecParameters (en-US) RTCRtpContributingSource (en-US) RTCRtpEncodingParameters (en-US) RTCRtpParameters (en-US) RTCRtpReceiveParameters (en-US) RTCRtpReceiver (en-US) RTCRtpSender (en-US) RTCRtpSendParameters (en-US) RTCRtpStreamStats (en-US) RTCRtpTransceiver RTCSctpTransport (en-US) RTCSessionDescription RTCStats RTCStatsIceCandidatePairState (en-US) RTCStatsReport RTCStatsType (en-US) RTCTrackEvent S Sanitizer (en-US) Screen ScreenOrientation (en-US) ScriptProcessorNode SecurityPolicyViolationEvent (en-US) Selection self.crypto self.performance Sensor (en-US) SensorErrorEvent (en-US) Serial (en-US) SerialPort (en-US) ServiceWorker ServiceWorkerContainer ServiceWorkerGlobalScope ServiceWorkerMessageEvent (en-US) ServiceWorkerRegistration setInterval() setTimeout() ShadowRoot SharedWorker SharedWorkerGlobalScope (en-US) SourceBuffer SourceBufferList (en-US) SpeechGrammar SpeechGrammarList (en-US) SpeechRecognition SpeechRecognitionAlternative (en-US) SpeechRecognitionError (en-US) SpeechRecognitionErrorEvent (en-US) SpeechRecognitionEvent (en-US) SpeechRecognitionResult SpeechRecognitionResultList (en-US) SpeechSynthesis SpeechSynthesisErrorEvent (en-US) SpeechSynthesisEvent (en-US) SpeechSynthesisUtterance SpeechSynthesisVoice (en-US) StaticRange (en-US) StereoPannerNode (en-US) Storage StorageEvent StorageManager structuredClone() (en-US) StylePropertyMap StylePropertyMapReadOnly (en-US) StyleSheet StyleSheetList SubmitEvent (en-US) SubtleCrypto SVGAElement SVGAltGlyphDefElement (en-US) SVGAltGlyphElement (en-US) SVGAltGlyphItemElement (en-US) SVGAngle (en-US) SVGAnimateColorElement (en-US) SVGAnimatedAngle SVGAnimatedBoolean (en-US) SVGAnimatedEnumeration (en-US) SVGAnimatedInteger (en-US) SVGAnimatedLength (en-US) SVGAnimatedLengthList (en-US) SVGAnimatedNumber (en-US) SVGAnimatedNumberList (en-US) SVGAnimatedPreserveAspectRatio (en-US) SVGAnimatedRect (en-US) SVGAnimatedString (en-US) SVGAnimatedTransformList (en-US) SVGAnimateElement SVGAnimateMotionElement (en-US) SVGAnimateTransformElement (en-US) SVGAnimationElement SVGCircleElement SVGClipPathElement (en-US) SVGComponentTransferFunctionElement (en-US) SVGCursorElement (en-US) SVGDefsElement (en-US) SVGDescElement (en-US) SVGElement SVGEllipseElement (en-US) SVGEvent SVGFEBlendElement (en-US) SVGFEColorMatrixElement (en-US) SVGFEComponentTransferElement (en-US) SVGFECompositeElement (en-US) SVGFEConvolveMatrixElement (en-US) SVGFEDiffuseLightingElement (en-US) SVGFEDisplacementMapElement (en-US) SVGFEDistantLightElement (en-US) SVGFEDropShadowElement (en-US) SVGFEFloodElement (en-US) SVGFEFuncAElement (en-US) SVGFEFuncBElement (en-US) SVGFEFuncGElement (en-US) SVGFEFuncRElement (en-US) SVGFEGaussianBlurElement (en-US) SVGFEImageElement (en-US) SVGFEMergeElement (en-US) SVGFEMergeNodeElement (en-US) SVGFEMorphologyElement (en-US) SVGFEOffsetElement (en-US) SVGFEPointLightElement (en-US) SVGFESpecularLightingElement (en-US) SVGFESpotLightElement (en-US) SVGFETileElement (en-US) SVGFETurbulenceElement (en-US) SVGFilterElement (en-US) SVGFontElement (en-US) SVGFontFaceElement (en-US) SVGFontFaceFormatElement (en-US) SVGFontFaceNameElement (en-US) SVGFontFaceSrcElement (en-US) SVGFontFaceUriElement (en-US) SVGForeignObjectElement (en-US) SVGGElement (en-US) SVGGeometryElement SVGGlyphElement (en-US) SVGGlyphRefElement (en-US) SVGGradientElement (en-US) SVGGraphicsElement SVGHKernElement (en-US) SVGImageElement (en-US) SVGLength (en-US) SVGLengthList (en-US) SVGLinearGradientElement (en-US) SVGLineElement (en-US) SVGMarkerElement (en-US) SVGMaskElement (en-US) SVGMatrix SVGMetadataElement (en-US) SVGMissingGlyphElement (en-US) SVGMPathElement (en-US) SVGNumber (en-US) SVGNumberList (en-US) SVGPathElement SVGPatternElement (en-US) SVGPoint (en-US) SVGPointList (en-US) SVGPolygonElement (en-US) SVGPolylineElement (en-US) SVGPreserveAspectRatio (en-US) SVGRadialGradientElement (en-US) SVGRect (en-US) SVGRectElement (en-US) SVGRenderingIntent (en-US) SVGScriptElement (en-US) SVGSetElement (en-US) SVGStopElement (en-US) SVGStringList (en-US) SVGStyleElement (en-US) SVGSVGElement SVGSwitchElement (en-US) SVGSymbolElement (en-US) SVGTextContentElement (en-US) SVGTextElement (en-US) SVGTextPathElement (en-US) SVGTextPositioningElement (en-US) SVGTitleElement (en-US) SVGTransform (en-US) SVGTransformList (en-US) SVGTRefElement (en-US) SVGTSpanElement (en-US) SVGUnitTypes (en-US) SVGUseElement SVGViewElement (en-US) SVGVKernElement (en-US) SyncEvent (en-US) SyncManager (en-US) T TaskAttributionTiming (en-US) Text TextDecoder TextDecoderStream (en-US) TextEncoder TextEncoderStream (en-US) TextMetrics TextTrack (en-US) TextTrackCue (en-US) TextTrackCueList (en-US) TextTrackList (en-US) TimeEvent (en-US) TimeRanges Touch TouchEvent TouchList TrackEvent (en-US) TransformStream (en-US) TransformStreamDefaultController (en-US) TransitionEvent TreeWalker TrustedHTML (en-US) TrustedScript (en-US) TrustedScriptURL (en-US) TrustedTypePolicy (en-US) TrustedTypePolicyFactory (en-US) U UIEvent URL URLPattern (en-US) URLSearchParams USB USBAlternateInterface (en-US) USBConfiguration (en-US) USBConnectionEvent (en-US) USBDevice (en-US) USBEndpoint (en-US) USBInterface (en-US) USBInTransferResult (en-US) USBIsochronousInTransferPacket (en-US) USBIsochronousInTransferResult (en-US) USBIsochronousOutTransferPacket (en-US) USBIsochronousOutTransferResult (en-US) USBOutTransferResult (en-US) UserProximityEvent (en-US) USVString V ValidityState VideoColorSpace (en-US) VideoConfiguration (en-US) VideoDecoder (en-US) VideoEncoder (en-US) VideoFrame (en-US) VideoPlaybackQuality VideoTrack (en-US) VideoTrackList VisualViewport VRDisplay VRDisplayCapabilities (en-US) VRDisplayEvent (en-US) VREyeParameters (en-US) VRFieldOfView (en-US) VRFrameData (en-US) VRLayerInit (en-US) VRPose VRStageParameters (en-US) VTTCue (en-US) VTTRegion (en-US) W WakeLock WakeLockSentinel WaveShaperNode WEBGL_color_buffer_float (en-US) WEBGL_compressed_texture_astc (en-US) WEBGL_compressed_texture_etc (en-US) WEBGL_compressed_texture_etc1 (en-US) WEBGL_compressed_texture_pvrtc (en-US) WEBGL_compressed_texture_s3tc (en-US) WEBGL_compressed_texture_s3tc_srgb (en-US) WEBGL_debug_renderer_info (en-US) WEBGL_debug_shaders (en-US) WEBGL_depth_texture (en-US) WEBGL_draw_buffers (en-US) WEBGL_lose_context WEBGL_multi_draw (en-US) WebGL2RenderingContext WebGLActiveInfo WebGLBuffer WebGLContextEvent WebGLFramebuffer WebGLProgram WebGLQuery WebGLRenderbuffer WebGLRenderingContext WebGLSampler WebGLShader WebGLShaderPrecisionFormat WebGLSync WebGLTexture WebGLTransformFeedback (en-US) WebGLUniformLocation WebGLVertexArrayObject WebSocket WheelEvent Window WindowClient WindowControlsOverlay (en-US) WindowControlsOverlayGeometryChangeEvent (en-US) WindowEventHandlers Worker WorkerGlobalScope WorkerLocation (en-US) WorkerNavigator (en-US) Worklet (en-US) WritableStream (en-US) WritableStreamDefaultController (en-US) WritableStreamDefaultWriter (en-US) X XMLDocument XMLHttpRequest XMLHttpRequestEventTarget XMLSerializer XPathEvaluator XPathException (en-US) XPathExpression (en-US) XPathNSResolver (en-US) XPathResult (en-US) XRAnchor (en-US) XRAnchorSet (en-US) XRBoundedReferenceSpace (en-US) XRCompositionLayer (en-US) XRCPUDepthInformation (en-US) XRCubeLayer (en-US) XRCylinderLayer (en-US) XRDepthInformation (en-US) XREquirectLayer (en-US) XRFrame (en-US) XRHand (en-US) XRHitTestResult (en-US) XRHitTestSource (en-US) XRInputSource (en-US) XRInputSourceArray (en-US) XRInputSourceEvent (en-US) XRInputSourcesChangeEvent (en-US) XRJointPose (en-US) XRJointSpace (en-US) XRLayer (en-US) XRLayerEvent (en-US) XRLightEstimate (en-US) XRLightProbe (en-US) XRMediaBinding (en-US) XRPermissionStatus (en-US) XRPose (en-US) XRProjectionLayer (en-US) XRQuadLayer (en-US) XRRay (en-US) XRReferenceSpace (en-US) XRReferenceSpaceEvent (en-US) XRRenderState (en-US) XRRigidTransform (en-US) XRSession (en-US) XRSessionEvent (en-US) XRSpace (en-US) XRSubImage (en-US) XRSystem (en-US) XRTransientInputHitTestResult (en-US) XRTransientInputHitTestSource (en-US) XRView (en-US) XRViewerPose (en-US) XRViewport (en-US) XRWebGLBinding (en-US) XRWebGLDepthInformation (en-US) XRWebGLLayer (en-US) XRWebGLSubImage (en-US) XSLTProcessor (en-US) 引用页面：https://developer.mozilla.org/en-US/docs/Web/API#specifications","categories":[],"tags":[]},{"title":"拖放 Drag and Drop","slug":"yuque/拖放 Drag and Drop","date":"2021-12-25T09:52:47.000Z","updated":"2022-09-27T11:29:42.781Z","comments":true,"path":"yuque/拖放 Drag and Drop/","link":"","permalink":"https://www.oocii.com/yuque/%E6%8B%96%E6%94%BE%20Drag%20and%20Drop/","excerpt":"","text":"事件 On 型事件处理程序 触发时刻 drag (en-US) ondrag 当拖拽元素或选中的文本时触发。 dragend (en-US) ondragend(en-US) 当拖拽操作结束时触发 (比如松开鼠标按键或敲“Esc”键). (见结束拖拽 (en-US) ) dragenter (en-US) ondragenter(en-US) 当拖拽元素或选中的文本到一个可释放目标时触发（见 指定释放目标 (en-US) ）。 dragexit ondragexit(en-US) 当元素变得不再是拖拽操作的选中目标时触发。 dragleave (en-US) ondragleave 当拖拽元素或选中的文本离开一个可释放目标时触发。 dragover (en-US) ondragover(en-US) 当元素或选中的文本被拖到一个可释放目标上时触发（每 100 毫秒触发一次）。 dragstart (en-US) ondragstart(en-US) 当用户开始拖拽一个元素或选中的文本时触发（见开始拖拽操作 (en-US) ）。 drop (en-US) ondrop 当元素或选中的文本在可释放目标上被释放时触发（见执行释放 (en-US) ）。","categories":[],"tags":[]},{"title":"10 种常见软件架构模式","slug":"yuque/10 种常见软件架构模式","date":"2021-12-23T05:29:10.000Z","updated":"2022-09-27T11:29:42.925Z","comments":true,"path":"yuque/10 种常见软件架构模式/","link":"","permalink":"https://www.oocii.com/yuque/10%20%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"快速总结：-软件架构模式在其随着时间的推移扩展和满足用户需求的能力中起着至关重要的作用。本文涵盖了不同类型的软件架构模式、它们的重要性和比较分析，以帮助您选择最佳模式。 你必须知道的 10 种最佳软件架构模式快速链接 介绍 什么是架构模式？ 软件架构模式的重要性 软件架构模式与设计模式 不同类型的软件架构模式 1.分层架构模式 2. 事件驱动架构 3. 微内核架构 4. 微服务架构 5. 基于空间的架构 6. 客户端-服务器架构 7.主从架构 8. 管道过滤器架构 9. 经纪人架构 10. 点对点架构 不同软件架构模式对比分析 任何软件中的缺陷都会对组织的业务产生重大影响。任何软件失败的主要原因都可能是选择了错误的软件架构模式。但是有了先验知识，您将能够指导设计人员和开发人员设计组件及其反应方式。经常看到公司在没有正式架构的情况下开始应用程序开发过程。然而，他们往往会忽略架构模式的缺失会迫使开发团队采用没有指导方针的传统模式。最终，他们的代码缺乏明确的角色、责任和彼此之间的关系。例如，在线银行应用程序不需要像微服务模式这样的复杂架构。它可以简单地使用客户端-服务器架构来获取请求。但是，如果没有这种规划，应用程序可能会变得复杂，无法返回或失去重组过程中的巨额投资。规划架构模式有助于事先分析风险并避免对业务产生任何不利影响。为了有一个清晰的理解，让我们探索一下什么是软件架构模式以及对其中一些类型的完整解释。 什么是架构模式？架构模式可以称为大纲，它允许您表达和定义各种软件系统的结构模式。它是一个可重用的解决方案，提供了一组预定义的子系统、角色和职责，包括用于定义它们之间关系的规则和路线图。它可以帮助您解决各种软件工程问题，例如性能限制、高可用性、最小化业务风险等。即使架构模式是系统的粗略图像或蓝图，它也不是实际的架构。相反，它是一个帮助您理解软件架构元素的概念。可以有无数的架构实现相同的模式。这就是为什么模式被称为“严格描述和常用”的原因。系统的成功取决于软件架构的选择。架构模式的著名示例是微服务、消息总线、服务请求者/消费者、MVC 模式、MVVM、微内核、n 层、领域驱动的设计组件和表示抽象控制。 软件架构模式的重要性是什么？软件架构模式具有重要意义，因为它可以解决不同领域内的各种问题。例如，复杂的用户请求可以轻松地分割成更小的块并分布在多个服务器上，而不是依赖于单个服务器。在另一个示例中，可以通过划分软件的各个部分而不是一次测试整个事物来简化测试协议。以下是为什么软件架构模式对任何软件应用程序都至关重要的更多原因： 定义应用程序的基本特征：了解每种架构的特征、优势和劣势对于选择合适的架构来满足您的业务目标非常重要。据观察，架构模式有助于定义应用程序的基本特征和行为。例如，一些架构模式可以自然地用于高度可扩展的应用程序，而其他架构模式可以用于敏捷应用程序。 保持质量和效率：您构建的任何应用程序都极有可能面临质量问题。根据您的软件开发质量属性，选择架构模式可以帮助最大限度地减少质量问题，同时保持效率。 提供敏捷性：软件应用程序在软件开发期间甚至在生产之后经历大量修改和迭代是很自然的。因此，预先规划核心软件架构可为应用程序提供敏捷性，并使未来的审核毫不费力。 问题解决：对软件架构的事先规划和知识可以清楚地了解应用程序及其组件将如何运行。有了适当的架构，开发团队可以采用最佳实践来解决复杂的流程并解决未来的任何错误。 提高生产力：不管一个人拥有关于编程语言、框架或应用程序的技能和知识，都必须有一定的标准化原则。有了合适的应用模式，公司可以快速掌握项目的状态。此外，当架构模式到位以明确项目范围时，生产率会提高。 软件架构模式与设计模式架构模式和设计模式之间只有一线之隔，大多数人会混淆这两者。对于基础知识，让我们假设您的团队有一项任务是建造一所房子并住在里面。首先，他们必须先计划好，然后再将砖块和水泥放在空地上。此外，即使在规划好房子之后，还有更多的东西要让它值得居住——他们需要基本的便利设施，比如厨房用具、床上用品、洗浴用品等等。在这个类比中，房子应该看起来如何代表建筑模式，而房子的室内设计代表设计模式。在软件系统中，当您必须创建业务逻辑、数据库逻辑、UI 等时考虑架构，而在实现业务逻辑或数据库逻辑时使用软件设计模式。 不同类型的软件架构模式让我们讨论一些帮助许多软件企业扩展业务的流行架构模式： 1.分层架构模式您可能听说过多层，也称为分层架构或 n 层架构。这种架构在设计师和软件架构师中广受欢迎，因为它与许多初创公司和成熟企业中的传统 IT 通信安排有共同点。通常，分层架构分为四个不同的层：表示层、业务层、持久性层和数据库层；但是，该模式并不局限于指定的层，可以有应用层或服务层或数据访问层。Java EE 等流行框架使用了这种架构模式。假设一个软件工程师正在构建一个大型应用程序，您发现自己在架构模式中使用了所有四个层。另一方面，小型企业可以将业务层和持久层组合成一个单元，主要是当后者作为业务逻辑层组件的一个组成部分使用时。这种模式很突出，因为每一层在应用程序中都扮演着不同的角色，并被标记为关闭。这意味着请求必须通过其正下方的层才能到达下一层。它的另一个概念——隔离层——使您能够在一个层内修改组件而不影响其他层。为了简化这个过程，让我们举一个电子商务 Web 应用程序的例子。处理购物车活动（例如计算购物车）所需的业务逻辑直接从应用程序层获取到表示层。在这里，应用层充当集成层，在数据层和表示层之间建立无缝通信。此外，最后一层是数据层，用于独立维护数据，无需应用服务器和业务逻辑的干预。用法： 需要快速构建的应用程序。 需要传统 IT 部门和流程的企业应用程序。 适用于开发人员经验不足且架构模式知识有限的团队。 需要严格的可维护性和可测试性标准的应用程序。 缺点： 没有明确角色的杂乱无章的源代码和模块可能会成为应用程序的问题。 跳过前面的层来创建紧密耦合可能会导致充满复杂相互依赖关系的逻辑混乱。 基本修改可能需要完全重新部署应用程序。 图表： 2. 事件驱动架构模式如果您正在寻找一种敏捷且高性能的架构模式，那么您应该选择事件驱动的架构模式。它由异步接收和处理事件的分离的、单一用途的事件处理组件组成。这种模式协调所有事件的产生、检测和消费行为，以及它们引起的响应。事件驱动的架构风格由两种拓扑结构组成——中介者和代理者。当需要通过中央调解器在事件总线中编排多个步骤时，使用调解器。另一方面，代理用于在不使用中央调解器的情况下将事件链接在一起。使用事件驱动架构的一个很好的例子是电子商务网站。事件驱动的架构使电子商务网站能够在高需求时对各种来源做出反应。同时，它避免了应用程序的任何崩溃或任何资源的过度配置。用法： 对于单个数据块仅与几个模块交互的应用程序。 帮助用户界面。 缺点： 只有在独立的情况下才能测试单个模块，否则需要在功能齐全的系统中进行测试。 当多个模块处理相同的事件时，错误处理对结构化变得具有挑战性。 如果事件有不同的需求，则为事件开发系统范围的数据结构可能会变得很困难。 对于解耦和独立的模块，维护基于事务的一致性机制可能会变得复杂。 图表： 3. 微内核架构模式这种架构模式由两种类型的组件组成——一个核心系统和几个插件模块。虽然核心系统以最小的功能工作以保持系统运行，但插件模块是具有专门处理的独立组件。如果我们从业务应用程序的角度来看，核心系统可以定义为通用业务逻辑，没有针对特殊情况、特殊规则或复杂条件流程的自定义代码。另一方面，插件模块旨在增强核心系统以产生额外的业务能力。以任务调度器应用为例，微内核包含调度和触发任务的所有逻辑，而插件包含特定的任务。只要插件遵循预定义的 API，微内核就可以触发它们，而无需了解实现细节。用法： 在基本例程和高阶规则之间有明确划分的应用程序。 具有一组固定的核心例程和一组需要频繁更新的动态规则的应用程序。 缺点： 插件必须具有良好的握手代码，以便微内核知道插件安装并准备好工作。 如果有多个插件依赖于微内核，那么更改微内核几乎是不可能的。 提前为核函数选择合适的粒度是很困难的，后期会更加复杂。 图表： 4. 微服务架构模式微服务架构模式被视为单体应用程序和面向服务架构的可行替代方案。这些组件通过有效、简化的交付管道作为单独的单元进行部署。该模式的好处是增强了可伸缩性和应用程序内的高度解耦。由于其解耦和独立的特性，组件通过远程访问协议进行访问。此外，相同的组件可以单独开发、部署和测试，而无需与任何其他服务组件相互依赖。Netflix 是微服务架构模式的早期采用者之一。该架构允许工程团队在小团队中工作，负责数百个微服务的端到端开发。这些微服务协同工作，每天为数百万 Netflix 客户流式传输数字娱乐。用法： 需要快速开发的业务和 Web 应用程序。 具有小型组件的网站、具有明确边界的数据中心以及全球远程团队。 缺点： 为服务组件设计正确的粒度级别始终是一项挑战。 所有应用程序都不包括可以拆分为独立单元的任务。 由于任务分布在不同的微服务中，性能可能会受到影响。 图表： 5. 基于空间的架构模式元组空间的概念——分布式共享内存的概念是该架构名称的基础。基于空间的模式包括两个主要组件——一个处理单元和一个虚拟化中间件。处理单元包含部分应用程序组件，包括基于 Web 的组件和后端业务逻辑。虽然较小的 Web 应用程序可以部署在单个处理单元中，但较大的应用程序可以将应用程序功能拆分为多个处理单元以避免功能崩溃。此外，虚拟化中间件组件包含控制数据同步和请求处理的各个方面的元素。它们可以定制编写，也可以作为第三方产品购买。投标拍卖网站可以被认为是这种架构模式的合适示例。它的功能是网站通过浏览器请求接收来自互联网用户的出价。收到请求后，网站会记录带有时间戳的出价，更新最新出价的信息，并将数据发送回浏览器。用法： 具有庞大用户群和持续请求负载的应用程序和软件系统。 应该解决可伸缩性和并发性问题的应用程序。 缺点： 在不干扰多个副本的情况下缓存数据以提高速度是一项复杂的任务。 图表： 6. 客户端-服务器架构模式客户端-服务器架构模式被描述为具有两个主要组件的分布式应用程序结构——客户端和服务器。这种架构促进了客户端和服务器之间的通信，它们可能在也可能不在同一网络下。客户端请求从服务器获取特定资源，其形式可能是数据、内容、服务、文件等。服务器识别发出的请求并通过发送请求的资源适当地响应客户端。客户端和服务器的功能特性是在应用程序中相互交互的程序示例。这种架构的功能非常灵活，因为单个服务器可以服务多个客户端，或者单个客户端可以使用多个服务器。服务器可以根据它们提供的服务或资源进行分类，而不管它们如何执行。电子邮件是使用客户端-服务器模式构建的模型的一个突出示例。当用户/客户端搜索特定电子邮件时，服务器会查看资源池并将请求的电子邮件资源发送回用户/客户端。这也有助于您改善用户体验。用法： 电子邮件、网上银行服务、万维网、网络打印、文件共享应用程序、游戏应用程序等应用程序。 专注于实时服务的应用程序（如电信应用程序）是使用分布式应用程序结构构建的。 需要受控访问并为大量分布式客户端提供多种服务的应用程序。 具有集中式资源和服务的应用程序，必须分布在多个服务器上。 缺点： 不兼容的服务器容量可能会变慢，从而导致性能瓶颈。 服务器通常容易出现单点故障。 改变模式是一个复杂而昂贵的过程。 服务器维护可能是一项艰巨且昂贵的任务。 图表： 7. 主从架构模式想象一个数据库同时接收多个类似请求。自然地，同时处理每个请求会使应用程序过程复杂化并减慢速度。这个问题的解决方案是主从架构模式，主数据库启动多个从组件以快速处理这些请求。正如标题所暗示的，主从架构模式可以被描绘成一个主将任务分配给它的从属。一旦从属组件完成它们的任务，分布式任务将由主组件编译并显示为结果。必须注意，主机对从属组件具有绝对控制权和权力，可以确定它们的通信和功能优先级。这种模式的独特之处在于每个从站将同时处理请求，同时提供结果。这也意味着在每个从站都将结果返回给主站之前，从站操作不会被视为完成。这种模式非常适合可以分成更小的部分来执行类似请求的应用程序。一个合适的例子是需要大量多任务处理作为其重要组成部分的数据库应用程序。用法： 开发可能需要多处理器兼容架构的操作系统。 必须将较大的服务分解为较小的组件的高级应用程序。 通过分布式网络处理存储在不同服务器中的原始数据的应用程序。 遵循多线程以提高其响应能力的 Web 浏览器。 缺点： 主组件的故障可能导致数据丢失，而从组件上没有备份。 系统内的依赖性可能导致从属组件的故障。 由于从属组件的隔离性质，间接成本可能会增加。 图表： 8. 管道过滤器架构模式管道过滤器架构模式处理单向流中的数据流，其中组件称为过滤器，管道是连接这些过滤器的那些。处理数据链发生在管道将数据传输到过滤器的地方，一个过滤器的结果成为下一个过滤器的输入。该架构的功能是将重要的组件/流程分解为可以同时处理的独立和多个组件。管道过滤器模式最适合使用 Web 服务处理流中数据的应用程序，并且可以将简单的序列创建为复杂的结构。编译器可以被认为是具有这种架构模式的合适示例，因为每个过滤器都执行词法分析、解析、语义分析和代码生成。用法： 它可用于促进简单的单向数据处理和转换的应用程序。 使用电子数据交换和外部动态列表等工具的应用程序。 开发用于错误检查和语法分析的数据编译器。 在 UNIX 等操作系统中执行高级操作，其中程序的输出和输入按顺序连接。 缺点： 如果基础架构设计不可靠，则过滤器之间可能会丢失数据。 最慢的过滤器限制了整个架构的性能和效率。 在过滤器之间传输期间，数据转换开销可能会增加。 该架构的持续转型特性使其对交互系统的用户友好性降低。 图表： 9. 代理架构模式代理模式用于构建具有解耦组件的分布式系统。通过调用远程服务，组件可以在代理架构模式中与其他组件交互。此外，代理负责组件之间的所有协调和通信。客户端、服务器和代理是代理模式的三个主要组成部分。通常，代理将有权访问与特定服务器相关的所有服务和特征。当客户端向代理请求服务时，代理会将它们重定向到合适的服务类别以进行进一步处理。这种架构模式的主要好处之一是它如何以动态方式管理与对象相关的操作，例如更改、添加、删除或重定位。最后，这种架构模式将所有与通信相关的代码从应用程序中分离出来，允许应用程序在分布式或单台计算机上运行。由于这些优势，代理架构已经流行起来。用法： 用于消息代理软件，如 Apache ActiveMQ、Apache Kafka、RabbitMQ 和 JBoss Messaging。 用于构建具有解耦组件的分布式系统。 缺点： 容错能力浅。 要求服务描述标准化。 隐藏层可能会降低软件性能。 更高的延迟并且需要更多的部署努力。 图表： 10. 点对点架构模式在对等架构模式中，单个组件称为对等。对等点可以充当客户端、服务器或两者兼而有之，并随着时间的推移动态地改变其角色。作为客户端，对等点可以向其他对等点请求服务，作为服务器，对等点可以向其他对等点提供服务。对等和客户端-服务器架构之间的显着区别在于网络上的每台计算机都具有相当大的权限，并且没有集中式服务器。随着越来越多的计算机加入网络，它的容量也会增加。对等架构模式的一个很好的例子是文件共享网络，如 Skype、BitTorrent 和 Napster。在 BitTorrent 中，点对点架构用于以分散的方式在互联网上分发数据和文件。通过使用此协议，可以轻松传输大型视频和音频文件。在 Skype 中，您可以使用 VoIP P2P 架构模式进行语音呼叫并向其他用户发送文本消息。通过这种方式，您可以使用对等架构进行文件共享、消息传递、协作等。用法： Gnutella 和 G2 等文件共享网络。 基于加密货币的产品，例如比特币和区块链。 P2PTV、PDTP 等多媒体产品。 缺点： 无法保证高质量的服务。 实现强大的安全性具有挑战性。 性能取决于连接到网络的节点数量。 无法备份文件或文件夹。 可能需要特定的接口来读取文件。 图表： 不同软件架构模式对比分析到目前为止，我们已经了解了不同类型的架构模式。现在，您会为您的软件类型选择哪种架构？你需要做出正确的选择。让我们看一下下表。","categories":[{"name":"软件架构模式","slug":"软件架构模式","permalink":"https://www.oocii.com/categories/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"Software Architecture Patterns","slug":"Software-Architecture-Patterns","permalink":"https://www.oocii.com/tags/Software-Architecture-Patterns/"},{"name":"Architecture","slug":"Architecture","permalink":"https://www.oocii.com/tags/Architecture/"},{"name":"架构设计","slug":"架构设计","permalink":"https://www.oocii.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"架构模式","slug":"架构模式","permalink":"https://www.oocii.com/tags/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"}]},{"title":"Array.prototype.sort() 方法在不同浏览器间的实现差异","slug":"yuque/Array.prototype.sort() 方法在不同浏览器间的实现差异","date":"2021-12-23T02:44:51.000Z","updated":"2022-09-27T11:29:42.959Z","comments":true,"path":"yuque/Array.prototype.sort() 方法在不同浏览器间的实现差异/","link":"","permalink":"https://www.oocii.com/yuque/Array.prototype.sort()%20%E6%96%B9%E6%B3%95%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%B4%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%B7%AE%E5%BC%82/","excerpt":"","text":"Array.prototype.sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的 由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。 语法arr.sort([compareFunction]); 参数compareFunction 可选用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的 Unicode 位点进行排序。firstEl第一个用于比较的元素。secondEl第二个用于比较的元素。返回值排序后的数组。请注意，数组已原地排序，并且不进行复制。 描述如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。 如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素： 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前； 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）； 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。所以，比较函数格式如下： function compare(a, b) &#123; if (a &lt; b) &#123; // 按某种排序标准进行比较, a 小于 b return -1; &#125; if (a &gt; b) &#123; return 1; &#125; // a must be equal to b return 0; &#125; 以上是 MDN 上面的说明, 但至于各浏览器的具体的实现是没有的. 浏览器对 compareFunction 参数处理的差异var numbers = [4, 2, 5, 1, 3]; numbers.sort(function (a, b) &#123; return a - b; &#125;); console.log(numbers); 直观感觉上 compareFunction 的 a, b 参数应该是, a === numbers[n], b === numbers[n + 1], 但实际上不同浏览器的处理方式却不同, 以下是 Chrome 和 Firefox 的处理结果:Chrome [1, 2, 3, 4, 5].sort((a, b) =&gt; &#123; console.log(a, b); &#125;); // 2 1 // 3 2 // 4 3 // 5 4 Firefox [1, 2, 3, 4, 5].sort((a, b) =&gt; &#123; console.log(a, b); &#125;); // 1 2 // 2 3 // 3 4 // 4 5 由上面结果可以看到, Chrome 和 Firefox compareFunction 的入参方式完全相反. 这是因为 ES 标准 没有规范 compareFunction 传入的参数到底该是什么顺序和算法，只是制定 compareFunction 两数之间的比较规则, 就是上面提到的： 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前； 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。 明确定义规则后，不管 a, b 两个数传进来的顺序如何, 只在乎它们两数的排序关系。这就解释了为什么同样的 compareFunction 下，尽管不同浏览器接受的参数不一样，还是能排序出一样的结果。 参考资料:https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sorthttps://tc39.es/ecma262/#sec-array.prototype.sort","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.oocii.com/categories/JavaScript/"},{"name":"Array","slug":"JavaScript/Array","permalink":"https://www.oocii.com/categories/JavaScript/Array/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://www.oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://www.oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://www.oocii.com/tags/ES/"},{"name":"Array","slug":"Array","permalink":"https://www.oocii.com/tags/Array/"}]},{"title":"动态 slot 透传并获取 slotProps 数据","slug":"yuque/动态 slot 透传并获取 slotProps 数据","date":"2021-12-23T02:44:19.000Z","updated":"2022-09-27T11:29:42.978Z","comments":true,"path":"yuque/动态 slot 透传并获取 slotProps 数据/","link":"","permalink":"https://www.oocii.com/yuque/%E5%8A%A8%E6%80%81%20slot%20%E9%80%8F%E4%BC%A0%E5%B9%B6%E8%8E%B7%E5%8F%96%20slotProps%20%E6%95%B0%E6%8D%AE/","excerpt":"","text":"slot 透传并获取 slotProps // grandparent &lt;Parent :first-day-of-week=&quot;0&quot; :test-prop=&quot;1999999999&quot; :date=&quot;new Date()&quot;&gt; &lt;template v-slot:monthCellRender=&quot;slotProps&quot;&gt; &lt;h2&gt; month: &#123;&#123; slotProps.month &#125;&#125; &lt;/h2&gt; &lt;/template&gt; &lt;template v-slot:dateCellRender=&quot;slotProps&quot;&gt; &lt;h3 style=&quot;background-color: #eef;&quot;&gt; date: &#123;&#123; slotProps.date &#125;&#125; &lt;/h3&gt; &lt;/template&gt; &lt;/Parent&gt; // parent component(Parent) &lt;Child&gt; &lt;template v-for=&quot;(value, slotKeyName) in $scopedSlots&quot; v-slot:[slotKeyName]=&quot;slotProps&quot;&gt; &lt;slot :name=&quot;slotKeyName&quot; v-bind=&quot;slotProps&quot;&gt;&lt;/slot&gt; &lt;div :key=&quot;slotKeyName&quot;&gt;&#123;&#123; slotKeyName &#125;&#125;&lt;/div&gt; &lt;/template&gt; &lt;/Child&gt; // child &lt;slot name=&quot;dateCellRender&quot; v-bind=&quot;item&quot;&gt;&lt;/slot&gt; 从 2.6.0 开始，这个 $scopedSlots 有两个变化： 作用域插槽函数现在保证返回一个 VNode 数组，除非在返回值无效的情况下返回 undefined。 所有的 $slots 现在都会作为函数暴露在 $scopedSlots 中。如果你在使用渲染函数，不论当前插槽是否带有作用域，我们都推荐始终通过 $scopedSlots 访问它们。这不仅仅使得在未来添加作用域变得简单，也可以让你最终轻松迁移到所有插槽都是函数的 Vue 3。 参考资料：https://cn.vuejs.org/v2/api/#slothttps://cn.vuejs.org/v2/api/#vm-scopedSlots动态插槽名：https://cn.vuejs.org/v2/guide/components-slots.html#%E5%8A%A8%E6%80%81%E6%8F%92%E6%A7%BD%E5%90%8D","categories":[{"name":"Vue","slug":"Vue","permalink":"https://www.oocii.com/categories/Vue/"},{"name":"slot","slug":"Vue/slot","permalink":"https://www.oocii.com/categories/Vue/slot/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://www.oocii.com/tags/vue/"},{"name":"slot","slug":"slot","permalink":"https://www.oocii.com/tags/slot/"},{"name":"scopedSlots","slug":"scopedSlots","permalink":"https://www.oocii.com/tags/scopedSlots/"},{"name":"dynamicSlotName","slug":"dynamicSlotName","permalink":"https://www.oocii.com/tags/dynamicSlotName/"}]},{"title":"WebRTC 示例","slug":"yuque/WebRTC 示例","date":"2021-03-13T12:12:23.000Z","updated":"2022-09-27T11:29:41.702Z","comments":true,"path":"yuque/WebRTC 示例/","link":"","permalink":"https://www.oocii.com/yuque/WebRTC%20%E7%A4%BA%E4%BE%8B/","excerpt":"","text":"这是一组小样本，展示了 WebRTC API 的各个部分。GitHub 存储库中提供了所有示例的代码。大多数示例都使用了adapter.js，一个 shim 将应用程序与规范更改和前缀差异隔离开来。https://webrtc.org/getting-started/testing 列出了对使用 Chrome 进行开发和测试有用的命令行标志。欢迎使用补丁和问题！有关说明，请参阅CONTRIBUTING.md 。警告：强烈建议在测试这些样本时使用耳机，否则可能会导致系统出现响亮的音频反馈。 获取用户媒体: getUserMedia():访问媒体设备 基本 getUserMedia 演示 将 getUserMedia 与画布一起使用 将 getUserMedia 与画布和 CSS 过滤器一起使用 选择相机分辨率 仅音频 getUserMedia() 输出到本地音频元素 仅音频 getUserMedia() 显示音量 记录流 使用 getDisplayMedia 进行屏幕共享 控制摄像机平移、倾斜和缩放 设备：查询媒体设备 选择摄像头、麦克风和扬声器 选择媒体源和音频输出 流捕获：从画布或视频元素流式传输 从视频元素流式传输到视频元素 从视频元素流式传输到对等连接 从画布元素流式传输到视频元素 从画布元素流式传输到对等连接 从画布元素记录流 使用内容提示指导视频编码 RTCPeer 连接：RTCPeerConnection:控制对等连接 单个选项卡中的基本对等连接演示 两个选项卡之间的基本对等连接演示 使用完美协商的对等连接 纯音频对等连接演示 即时更改带宽 通话前更改编解码器 升级通话并开启视频 一次多个对等连接 将一台 PC 的输出转发到另一台 芒格 SDP 参数 设置对等连接时使用 pranswer 约束和统计 更多约束和统计信息 RTCPeerConnection 和 requestVideoFrameCallback() 显示各种场景的 createOffer 输出 使用 RTCDTMFSender 显示对等连接状态 从 STUN/TURN 服务器收集的 ICE 候选者 重新启动 ICE Web 音频输出作为对等连接的输入 对等连接作为 Web 音频的输入 衡量重新谈判需要多长时间 通话前选择 scalablilityMode - 可扩展视频编码 (SVC) 扩展 RTC 数据通道：RTCDataChannel:通过对等连接发送任意数据 传输文本 传输文件 传输数据 消息传递 视频聊天：全功能 WebRTC 应用程序 AppRTC 视频聊天客户端，您可以用完 Docker 映像 可插入流：用于处理媒体的 API（实验性）（实验性）（实验性）（实验性）（实验性）（实验性） 使用 WebRTC 可插入流进行端到端加密 使用 WebRTC 可插入流的视频分析器 使用 MediaStream 可插入流进行视频处理 使用 MediaStream 可插入流进行音频处理 在 Worker 中使用 MediaStream 可插入流进行视频裁剪 与 WebGPU 集成以进行自定义视频渲染：","categories":[{"name":"WebRTC","slug":"WebRTC","permalink":"https://www.oocii.com/categories/WebRTC/"}],"tags":[{"name":"WebRTC","slug":"WebRTC","permalink":"https://www.oocii.com/tags/WebRTC/"},{"name":"MediaDevices","slug":"MediaDevices","permalink":"https://www.oocii.com/tags/MediaDevices/"},{"name":"RTCPeerConnection","slug":"RTCPeerConnection","permalink":"https://www.oocii.com/tags/RTCPeerConnection/"},{"name":"RTCDataChannel","slug":"RTCDataChannel","permalink":"https://www.oocii.com/tags/RTCDataChannel/"}]},{"title":"codepen snipet","slug":"yuque/codepen snipet","date":"2019-08-01T12:29:10.000Z","updated":"2022-09-27T11:29:42.447Z","comments":true,"path":"yuque/codepen snipet/","link":"","permalink":"https://www.oocii.com/yuque/codepen%20snipet/","excerpt":"","text":"See the Pen ](https://codepen.io/arongz/pen/jOGRJqe\">) hello world by Arz (@arongz)](https://codepen.io/arongz\">@arongz)) on CodePen.](https://codepen.io\">CodePen.) ](https://cpwebassets.codepen.io/assets/embed/ei.js\">) 点击查看【codepen】","categories":[{"name":"CodePen","slug":"CodePen","permalink":"https://www.oocii.com/categories/CodePen/"}],"tags":[{"name":"codepen","slug":"codepen","permalink":"https://www.oocii.com/tags/codepen/"},{"name":"code","slug":"code","permalink":"https://www.oocii.com/tags/code/"},{"name":"snippet","slug":"snippet","permalink":"https://www.oocii.com/tags/snippet/"}]},{"title":"什么是UML(Unified Modeling Language)？","slug":"yuque/什么是UML(Unified Modeling Language)？","date":"2018-06-02T12:32:21.000Z","updated":"2022-09-27T11:29:42.333Z","comments":true,"path":"yuque/什么是UML(Unified Modeling Language)？/","link":"","permalink":"https://www.oocii.com/yuque/%E4%BB%80%E4%B9%88%E6%98%AFUML(Unified%20Modeling%20Language)%EF%BC%9F/","excerpt":"","text":"UML是统一建模语言 Unified Modeling Language 的缩写，是一种标准化建模语言，由一组集成图组成，旨在帮助系统和软件开发人员指定、可视化、构建和记录软件系统的工件，以及用于业务建模和其他非软件系统。UML 代表了一组最佳工程实践，这些实践已被证明在大型复杂系统的建模中是成功的。UML 是开发面向对象软件和软件开发过程中非常重要的一部分。UML 主要使用图形符号来表达软件项目的设计。使用 UML 有助于项目团队进行交流、探索潜在的设计并验证软件的架构设计。在本文中，我们将为您详细介绍什么是 UML， UML 的起源UML 的目标是提供一种标准符号，可以被所有面向对象的方法使用，并选择和集成前体符号的最佳元素。UML 被设计用于广泛的应用程序。因此，它为广泛的系统和活动（例如，分布式系统、分析、系统设计和部署）提供了结构。UML 是一种由 OMT 统一产生的符号 对象建模技术 OMT [ James Rumbaugh 1991] - 最适合分析和数据密集型信息系统。 Booch [ Grady Booch 1994] - 非常适合设计和实施。Grady Booch 与Ada语言进行了广泛的合作，并且是该语言的面向对象技术开发的主要参与者。虽然 Booch 方法很强大，但符号不太受欢迎（很多云形状主导了他的模型 - 不是很整齐） OOSE（面向对象的软件工程 [ Ivar Jacobson 1992]） - 以一个称为用例的模型为特色。用例是一种强大的技术，可用于理解整个系统（OO 传统上薄弱的领域）的行为。 1994 年，OMT 的创建者 Jim Rumbaugh 在离开通用电气并加入 Rational Corp 的 Grady Booch 时震惊了软件界。合作的目的是将他们的想法合并为一个单一的、统一的方法（该方法的暂定名称）。方法确实是“统一方法”）。到 1995 年，OOSE 的创建者 Ivar Jacobson 也加入了 Rational，他的想法（尤其是“用例”的概念）被输入到新的统一方法 - 现在称为统一建模语言 1。Rumbaugh、Booch 和 Jacobson 的团队被亲切地称为“三人组”UML 也受到其他面向对象表示法的影响： 梅勒和施莱尔 [1998] 科德和尤登 [1995] Wirfs-Brock [1990] 马丁和奥德尔 [1992] UML 还包括当时其他主要方法中不存在的新概念，例如扩展机制和约束语言。 UML 的历史 1996 年，对象管理组 (OMG)发布的第一个提案请求 (RFP)为这些组织联合起来制定联合 RFP 响应提供了催化剂。 Rational 与几个愿意投入资源致力于强大的 UML 1.0 定义的组织建立了 UML 合作伙伴联盟。那些对 UML 1.0 定义贡献最大的人包括： 数码设备公司 生命值 i-Logix 智能公司 IBM 图标计算 MCI 系统屋 微软 甲骨文 理性软件 德州仪器 优利系统 这种合作产生了 UML 1.0，这是一种定义良好、表达能力强、功能强大且普遍适用的建模语言。这在 1997 年 1 月作为初始 RFP 响应提交给 OMG。1 1997 年 1 月，IBM、ObjecTime、Platinum Technology、Ptech、Taskon、Reich Technologies 和 Softeam 也分别向 OMG 提交了 RFP 响应。这些公司与 UML 合作伙伴一起贡献了他们的想法，并且合作伙伴共同产生了修订后的 UML 1.1 响应。UML 1.1 版本的重点是提高 UML 1.0 语义的清晰度并吸收新合作伙伴的贡献。它在 1997.1 秋季提交给 OMG 供他们考虑并通过，将 1.1 增强到 1.5，随后从 01 到 06 到 UML 2.1（现在 UML 当前版本是 2.5） 为什么选择 UML随着软件对许多公司的战略价值的增加，该行业正在寻找自动化软件生产和提高质量、降低成本和缩短上市时间的技术。这些技术包括组件技术、可视化编程、模式和框架。随着范围和规模的增加，企业还寻求管理系统复杂性的技术。特别是，他们认识到需要解决重复出现的架构问题，例如物理分布、并发性、复制、安全性、负载平衡和容错。此外，万维网的发展虽然使一些事情变得更简单，但也加剧了这些架构问题。统一建模语言 (UML) 旨在响应这些需求。 为用户提供即用型、富有表现力的可视化建模语言，以便他们开发和交换有意义的模型。 提供可扩展性和专业化机制来扩展核心概念。 独立于特定的编程语言和开发过程。 为理解建模语言提供正式的基础。 鼓励 OO 工具市场的增长。 支持更高级别的开发概念，例如协作、框架、模式和组件。 整合最佳实践。 UML - 概述在我们开始研究 UML 理论之前，我们将简要介绍一下 UML 的一些主要概念。关于 UML，首先要注意的是有很多不同的图表（模型）需要习惯。这样做的原因是可以从许多不同的角度看待一个系统。软件开发将有许多利益相关者参与。例如： 分析师 设计师 编码员 测试人员 质量保证 客户 技术作者 所有这些人都对系统的不同方面感兴趣，每个人都需要不同程度的细节。例如，编码人员需要了解系统的设计并能够将设计转换为低级代码。相比之下，技术作家对整个系统的行为感兴趣，需要了解产品的功能。UML 试图提供一种表达能力很强的语言，以使所有利益相关者都可以从至少一个 UML 图中受益。下面快速浏览一下这 13 个图表中的每一个，如下面的 UML 2 图表结构所示：结构图显示了系统的静态结构及其在不同抽象和实现级别上的部分，以及它们之间的关系。结构图中的元素代表系统的有意义的概念，可能包括抽象概念、现实世界和实现概念，结构图有以下七种类型： 类图 组件图 部署图 对象图 封装图 复合结构图 剖面图 行为图显示了系统中对象的动态行为，可以描述为系统随时间发生的一系列变化，行为图有以下七种类型： 用例图 活动图 状态机图 序列图 通讯图 交互概览图 时序图 什么是类图？类图是一种中心建模技术，几乎贯穿所有面向对象的方法。该图描述了系统中对象的类型以及它们之间存在的各种静态关系。 关系重要的关系主要有以下三种： 关联- 表示类型实例之间的关系（一个人为一家公司工作，一家公司有多个办事处。 继承- 用于 OO 的 ER 图最明显的补充。它与 OO 设计中的继承有直接的对应关系。 聚合- 聚合，一种面向对象设计中的对象组合形式。 类图示例有关类图的更多详细信息，请阅读文章什么是类图？ 什么是组件图？在统一建模语言中，组件图描述了组件如何连接在一起以形成更大的组件或软件系统。它说明了软件组件的体系结构以及它们之间的依赖关系。这些软件组件包括运行时组件、可执行组件以及源代码组件。 组件图示例有关组件图的更多详细信息，请阅读文章什么是组件图？ 什么是部署图？部署图有助于对面向对象软件系统的物理方面进行建模。它是一个结构图，将系统的体系结构显示为软件工件到部署目标的部署（分布）。人工制品代表了物理世界中的具体元素，它们是开发过程的结果。它在静态视图中对运行时配置进行建模，并可视化应用程序中工件的分布。在大多数情况下，它涉及对硬件配置以及存在的软件组件进行建模。 部署图示例有关部署图的更多详细信息，请阅读文章什么是部署图？ 什么是对象图？对象图是实例的图，包括对象和数据值。静态对象图是类图的一个实例；它显示了系统在某个时间点的详细状态的快照。不同之处在于类图表示由类及其关系组成的抽象模型。但是，对象图表示特定时刻的实例，这在本质上是具体的。对象图的使用相当有限，即显示数据结构的示例。 类图与对象图 - 一个例子有些人可能会发现很难理解 UML 类图和 UML 对象图之间的区别，因为它们都由命名的“矩形块”组成，其中包含属性，并且之间具有链接，这使得两个 UML 图看起来相似. 有些人甚至可能认为它们是相同的，因为在 UML 工具中，它们使用的类图和对象图的符号都放在同一个图编辑器 - 类图中。但实际上，类图和对象图代表了代码库的两个不同方面。在本文中，我们将为您提供有关这两个 UML 图的一些想法，它们是什么，它们有什么区别以及何时使用它们。 类图与对象图的关系您在编程时创建“类”。例如，在网上银行系统中，您可以创建“用户”、“帐户”、“交易”等类。在课堂管理系统中，您可以创建“教师”、“学生”、“作业”等类. 在每个类中，都有代表该类特征和行为的属性和操作。类图是一个 UML 图，您可以在其中可视化这些类，以及它们的属性、操作和相互关系。UML 对象图显示系统中的对象实例在特定状态下如何相互交互。它还表示处于该状态的那些对象的数据值。换句话说，UML 对象图可以看作是在特定状态下如何使用类（在 UML 类图中绘制）的表示。如果您不喜欢这些定义，请查看以下 UML 图示例。我相信你会在几秒钟内了解它们的差异。 类图示例下面的类图示例表示两个类 - 用户和附件。用户可以上传多个附件，因此这两个类通过关联连接，在附件端使用 0..* 作为多重性。 对象图示例下面的对象图示例向您展示了用户和附件类的对象实例在彼得（即用户）尝试上传两个附件时的“样子”。所以要上传的两个附件对象有两个 Instance Specification。有关对象图的更多详细信息，请阅读文章什么是对象图？ 什么是封装图？包图是 UML 结构图，显示包和包之间的依赖关系。模型图允许显示系统的不同视图，例如，作为多层（也称为多层）应用程序 - 多层应用程序模型。 封装图示例有关包图的更多详细信息，请阅读文章什么是包图？ 什么是复合结构图？复合结构图是添加到 UML 2.0 的新工件之一。复合结构图类似于类图，是一种组件图，主要用于从微观角度对系统进行建模，但它描绘的是单个部分而不是整个类。它是一种静态结构图，显示了类的内部结构以及这种结构使协作成为可能。该图可以包括内部部件、部件相互交互或类实例通过其与部件和外部世界交互的端口，以及部件或端口之间的连接器。复合结构是一组互连的元素，它们在运行时协作以实现某些目的。每个元素在协作中都有一些定义的角色。 复合结构图示例有关复合结构图的更多详细信息，请阅读文章什么是复合结构图？ 什么是剖面图？概要图使您能够创建特定于域和平台的构造型并定义它们之间的关系。您可以通过绘制原型形状来创建原型，并通过以资源为中心的界面将它们与组合或概括联系起来。您还可以定义和可视化构造型的标记值。 剖面图示例有关 Profile Diagram 的更多详细信息，请阅读文章什么是 UML 中的 Profile Diagram？ 什么是用例图？用例模型根据用例描述系统的功能需求。它是系统预期功能（用例）及其环境（参与者）的模型。用例使您能够将您对系统的需求与系统如何满足这些需求联系起来。将用例模型想象成一个菜单，就像您在餐厅中找到的菜单一样。通过查看菜单，您可以了解可供您选择的菜品、个别菜肴及其价格。您还知道餐厅供应哪种美食：意大利菜、墨西哥菜、中国菜等。通过查看菜单，您可以对该餐厅的用餐体验有一个整体印象。实际上，菜单“模仿”了餐厅的行为。因为它是一种非常强大的计划工具，所以用例模型通常被所有团队成员用于开发周期的所有阶段。 用例图示例有关用例图的更多详细信息，请阅读文章什么是用例图？ 什么是活动图？活动图是逐步活动和操作的工作流的图形表示，支持选择、迭代和并发。它描述了目标系统的控制流程，例如探索复杂的业务规则和操作，描述用例以及业务流程。在统一建模语言中，活动图旨在为计算和组织过程（即工作流）建模。 活动图示例有关活动图的更多详细信息，请阅读文章什么是活动图？ 什么是状态机图？状态图是 UML 中用于描述系统行为的一种图，它基于 David Harel 的状态图概念。状态图描述了允许的状态和转换以及影响这些转换的事件。它有助于可视化对象的整个生命周期，从而有助于更好地理解基于状态的系统。 状态机图示例有关状态机图的更多详细信息，请阅读文章什么是状态机图？ 什么是序列图？序列图基于时间序列对对象的协作进行建模。它显示了对象在用例的特定场景中如何与其他对象交互。借助先进的可视化建模能力，您只需点击几下即可创建复杂的序列图。此外，Visual Paradigm 等一些建模工具可以根据您在用例描述中定义的事件流生成序列图。 序列图示例有关序列图的更多详细信息，请阅读文章什么是序列图？ 什么是通信图？与序列图类似，通信图也用于对用例的动态行为进行建模。与序列图相比，通信图更侧重于显示对象的协作而不是时间序列。它们实际上在语义上是等价的，因此某些建模工具（例如 Visual Paradigm）允许您从一个到另一个生成它。 通信图示例有关通信图的更多详细信息，请阅读文章什么是通信图？ 什么是交互概览图？交互概览图侧重于交互控制流的概览。它是活动图的变体，其中节点是交互或交互发生。交互概览图描述了隐藏消息和生命线的交互。您可以链接“真实”图表并在交互概览图中实现图表之间的高度可导航性。 交互概览图示例有关交互概览图的更多详细信息，请阅读文章什么是交互概览图？ 什么是时序图？时序图显示了对象在给定时间段内的行为。时序图是序列图的一种特殊形式。时序图和时序图的区别在于轴是颠倒的，时间从左到右增加，生命线显示在垂直排列的单独隔间中。 时序图示例有关时序图的更多详细信息，请阅读文章什么是时序图？ 学习 UML。绘制 UML。获取 Visual Paradigm 社区版，这是一个免费的 UML 工具，可以帮助您更快、更有效地学习 UML。Visual Paradigm Community Edition 支持所有 UML 图类型。它的 UML 建模器屡获殊荣，易于使用且直观。 UML 词汇表和术语 抽象类- 永远不会被实例化的类。这个类的实例永远不会存在。 参与者- 启动系统所涉及的事件的对象或人。 活动：活动图中的步骤或动作。表示系统或演员采取的行动。 活动图：一个美化的流程图，显示流程中的步骤和决策以及并行操作，例如算法或业务流程。 聚合- 是另一个类的一部分。在图表中包含类旁边显示有一个空心菱形。 Artifacts - 描述设计过程中步骤输出的文档。描述是图形的、文本的或某种组合。 关联- 模型的两个元素之间的连接。这可能表示代码中的成员变量，或人事记录与其所代表的人之间的关联，或两类工人之间的关系，或任何类似的关系。默认情况下，关联中的两个元素是相等的，并且通过关联相互了解。一个关联也可以是一个可导航的关联，这意味着关联的源端知道目标端，但反之则不然。 关联类：代表两个其他类之间的关联并向其添加信息的类。 属性- 可用于引用其他对象或保存对象状态信息的对象的特征。 基类：定义由子类通过泛化关系继承的属性和操作的类。 分支：活动图中的决策点。分支中出现多个转换，每个转换都有一个保护条件。当控制到达 Branch 时，恰好有一个 Guard Condition 为真；并且控制遵循相应的转换。 类：类似对象的类别，都由相同的属性和操作描述，并且所有分配兼容。 类图- 显示系统类和它们之间的关系。 分类器：具有属性和操作的 UML 元素。具体来说，Actors、Classes 和 Interfaces。 协作：通信图中两个对象之间的关系，表明消息可以在对象之间来回传递。 通信图- 显示操作如何完成的图表，同时强调对象的角色。 组件：系统内可部署的代码单元。 组件图：显示各种组件和接口之间关系的图表。 概念- 包含在领域模型中的名词或抽象概念。 构建阶段——Rational Unified Process 的第三阶段，在此阶段，功能的多次迭代被构建到正在构建的系统中。这是主要工作完成的地方。 依赖关系：表示一个分类器知道另一个分类器的属性和操作，但不直接连接到第二个分类器的任何实例的关系。 部署图：显示各种处理器之间关系的图表。 域- 系统所涉及的宇宙的一部分。 细化阶段- Rational Unified Process 的第二阶段，允许额外的项目计划，包括构建阶段的迭代。 元素：出现在模型中的任何项目。 封装- 对象中的数据是私有的。 泛化- 表示一个类是另一个类（超类）的子类。一个空心箭头指向超类。 事件：在状态图中，这表示导致系统采取行动或切换状态的信号或事件或输入。 最终状态：在状态图或活动图中，这表示图完成的点。 Fork：活动图中多个并行控制线程开始的点。 泛化：一种继承关系，其中子类继承并添加到基类的属性和操作。 GoF - 四组设计模式。 High Cohesion - 一种 GRASP 评估模式，可确保类不太复杂，执行不相关的功能。 低耦合- 一种 GRASP 评估模式，用于衡量一个类对另一个类的依赖程度或与另一个类的连接程度。 初始阶段- Rational Unified Process 的第一个阶段，处理项目的最初概念化和开始。 继承——子类继承其父（超类）类的属性或特征。这些属性可以在子类中被覆盖。 初始状态：在状态图或活动图中，这表示图开始的点。 实例- 类被用作创建对象的模板。这个对象被称为类的一个实例。可以创建任意数量的类实例。 接口：定义形成行为契约的属性和操作的分类器。提供者类或组件可以选择实现接口（即实现其属性和操作）。然后，客户端类或组件可以依赖于接口，从而使用提供者，而不需要提供者的真实类的任何细节。 迭代- 一个迷你项目部分，在此期间将一些小功能添加到项目中。包括分析、设计和编码的开发循环。 加入：活动图中的一个点，多个并行控制线程同步并重新加入。 成员：分类器中的属性或操作。 合并：活动图中不同控制路径汇集在一起的点。 消息- 从一个对象到另一个对象的请求，要求接收消息的对象做某事。这基本上是对接收对象中的方法的调用。 方法- 对象中的函数或过程。 模型- 中央 UML 工件。由按包以层次结构排列的各种元素组成，以及元素之间的关系。 多重性- 显示在域模型中并在概念框外表示，它表示对象数量与其他对象的分位数的关系。 可导航性：指示关系的哪一端知道另一端。关系可以具有双向可导航性（每一端都知道另一端）或单向可导航性（一端知道另一端，但反之则不然）。 Notation - 带有用于创建分析和设计方法的规则的图形文档。 注意：添加到图表中的文本注释以更详细地解释图表。 对象- 对象：在活动图中，从活动接收信息或向活动提供信息的对象。在协作图或序列图中，参与图中描述的场景的对象。通常：给定分类器（Actor、Class 或 Interface）的一个实例或示例。 包- 一组逻辑上应该组合在一起的 UML 元素。 包图：一个类图，其中所有元素都是包和依赖项。 模式- 用于确定交互对象的责任分配的解决方案。它是成功解决众所周知的常见问题的名称。 参数：操作的参数。 多态性- 相同的消息，不同的方法。也用作图案。 Private：应用于属性或操作的可见性级别，指示只有包含该成员的分类器的代码才能访问该成员。 处理器：在部署图中，这表示可以部署代码的计算机或其他可编程设备。 受保护：应用于属性或操作的可见性级别，指示只有包含该成员的分类器或其子类的代码才能访问该成员。 Public：应用于属性或操作的可见性级别，表示任何代码都可以访问该成员。 阅读方向箭头- 指示领域模型中关系的方向。 实现：表示组件或类提供给定接口。 角色- 在领域模型中使用，它是关于参与者角色的可选描述。 序列图：显示对象随时间存在的图表，以及随时间在这些对象之间传递以执行某些行为的消息。状态图 - 显示所有可能的对象状态的图。 状态：在状态图中，这表示系统或子系统的一种状态：它在某个时间点正在做什么，以及它的数据值。 状态图：显示系统或子系统的状态、状态之间的转换以及导致转换的事件的图。 静态：属性的修饰符，指示在分类器的所有实例之间共享的属性只有一个副本。操作的修饰符，表示该操作独立存在并且不对分类器的一个特定实例进行操作。 Stereotype：应用于模型元素的修饰符，表明它通常不能在 UML 中表达。本质上，Stereotypes 允许您定义自己的 UML“方言”。 子类：继承由子类通过泛化关系定义的属性和操作的类。 泳道：活动图的一个元素，指示系统或域的哪些部分执行特定的活动。Swimlane 中的所有活动都是由 Swimlane 表示的对象、组件或 Actor 的责任。 Time Boxing - 每次迭代都有一个带有特定目标的时间限制。 过渡：在活动图中，表示从一个活动或分支或合并或分叉或连接到另一个的控制流。在状态图中，表示从一个状态到另一个状态的变化。 过渡阶段- Rational Unified Process 的最后一个阶段，在此阶段用户接受培训以了解如何使用新系统，并且系统可供用户使用。 UML - 统一建模语言利用文本和图形文档通过允许对象之间更紧密的关系来增强软件项目的分析和设计。 用例：在用例图中，表示系统为响应来自参与者的某些请求而采取的行动。 用例图：显示参与者和用例之间关系的图表。 可见性：属性或操作的修饰符，指示哪些代码可以访问该成员。可见性级别包括公共、受保护和私有。 工作流- 一组产生特定结果的活动。 流行的 UML 书籍下面列出了一些最畅销的 UML 书籍，您可以阅读这些书籍来学习 UML。 UML Distilled：标准对象建模语言简要指南 UML 2 和统一过程：实用的面向对象分析和设计 学习 UML 2.0 使用 UML 构建 Web 应用程序 统一建模语言参考手册 UML 2.0 风格的元素 面向 Java 程序员的 UML Schaum 的 UML 大纲 统一建模语言用户指南 UML 2 认证指南：基础和中级考试 UML 中面向对象设计的基础 使用 UML 应用用例驱动的对象建模：一个带注释的电子商务示例 使用 UML 设计灵活的面向对象系统 使用 UML 的用例驱动对象建模 使用 UML 2.0 版进行系统分析和设计：一种面向对象的方法 简而言之 UML 2.0 面向对象的分析和设计与应用程序 UML 解释 设计模式：可重用的面向对象软件的要素 对象入门：使用 UML 2.0 进行敏捷模型驱动开发 相关链接 用于可视化建模的专业 UML 设计工具 相关链接：wiki 统一建模语言","categories":[{"name":"UML","slug":"UML","permalink":"https://www.oocii.com/categories/UML/"}],"tags":[{"name":"UML","slug":"UML","permalink":"https://www.oocii.com/tags/UML/"}]},{"title":"现代浏览器支持的 5 种类型的 Observer (4) —— Resize Observer","slug":"yuque/现代浏览器支持的 5 种类型的 Observer (4) —— Resize Observer","date":"2018-04-02T12:06:11.000Z","updated":"2022-09-27T11:29:41.968Z","comments":true,"path":"yuque/现代浏览器支持的 5 种类型的 Observer (4) —— Resize Observer/","link":"","permalink":"https://www.oocii.com/yuque/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84%205%20%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%20Observer%20(4)%20%E2%80%94%E2%80%94%20Resize%20Observer/","excerpt":"","text":"什么是观察者？在深入了解现代浏览器支持的观察者系列之前，让我们先了解一般的观察者是什么？观察者是一个观察或注意到某事的程序。观察者有助于观察浏览器中发生的某些活动并做出相应的响应。 我们经常处理用 addEventListener 来添加事件监听用户的各种操作，比如：click, mousedown, drag, wheel 等（完整事件列表参考：https://developer.mozilla.org/zh-CN/docs/Web/Events） 。 现代浏览器提供了 5 种 Observer ，使用这些 Observer ，我们可以观察浏览器中发生的不同类型的活动，并采取必要的行动。例如。我们可以观察到，视频是否显示在视口中并启用自动播放，是否已从父 DOM 元素中添加或删除子元素，是否更改了框元素的大小/尺寸等等。 以下是现代浏览器支持的五种不同类型的 Observer 。 Intersection Observer Mutation Observer Performance Observer Resize Observer ReportingObserver Resize Observer Resize Observer 允许我们观察 DOM 元素的内容矩形大小（宽度、高度）的变化并做出相应的反应。它就像元素的 document.onresize() 或 window.resize() 事件。当元素更改其大小而不调整主窗口大小时，它很有用。例如，添加新的子元素、将元素的 display 属性设置为 none 或类似的操作可以更改元素、其兄弟姐妹或祖先的大小。它只看内容框。调整大小观察者的一些行为如下所述 当观察到的元素从 DOM 中插入/删除时，观察将触发。 当观察元素显示设置为无时，观察将触发。 对于未替换的内联元素，观察不会触发。 CSS 转换不会触发观察。 如果元素有显示，并且元素的大小不是 0,0，则观察将在观察开始时触发。 调整大小观察者通知内容框的尺寸，如下图所示 浏览器支持：目前除了 chrome≥64 以外的大部分浏览器都不支持。 观察者的 api 可以作为其他观察者分三步使用a) 创建观察者只需调用其构造函数并传递处理函数即可创建。 const observer = new ResizeObserver(handler); b) 定义要观察的目标对象定义要观察其大小变化的目标对象。 const child = document.querySelector(“.child”); observer.observe(child); c) 定义回调处理程序 function handler(entries) &#123; entries.forEach((entry) =&gt; &#123; const size = entry.target.contentRect; console.log( `Element’s size: width: $&#123;size.width&#125; , height: $&#123;size.height&#125;` ); &#125;); &#125; 示例： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; button &#123; background: purple; color: white; cursor: pointer; display: inline-block; font-size: 20px; padding: 1.75rem 1rem; text-align: center; text-decoration: none; font-weight: bold; margin-right: 5px; &#125; .box &#123; box-sizing: border-box; margin-top: 10px; border: 1px solid green; width: 300px; height: 200px; text-align: center; padding: 20px; font-size: 25px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;Resize Box Below&lt;/button&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;script&gt; if (!(&quot;ResizeObserver&quot; in window)) &#123; document.body.innerText = &quot;Not supported by your browser&quot;; &#125; /* Create resize observer */ const observer = new ResizeObserver(handler); /* Callback handler */ function handler(entries) &#123; entries.forEach((entry) =&gt; &#123; const size = entry.contentRect; console.log( `Resize Observer&#39;s callback: box size: width: $&#123;size.width&#125; , height: $&#123;size.height&#125;` ); &#125;); &#125; /* Observe child element */ const child = document.querySelector(&quot;.box&quot;); observer.observe(child); // Click event listener for button const box = document.querySelector(&quot;.box&quot;); let boxWidth = box.getBoundingClientRect().width; let boxHeight = box.getBoundingClientRect().height; box.innerText = `Width: $&#123;boxWidth&#125; , Height: $&#123;boxHeight&#125;`; const boxSizes = [200, 300, 450, 500, 550, 600]; document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;, function () &#123; // Select random width and height of a box element boxWidth = boxSizes[Math.floor(Math.random() * boxSizes.length)]; boxHeight = boxSizes[Math.floor(Math.random() * boxSizes.length)]; box.style.width = boxWidth + &quot;px&quot;; box.style.height = boxHeight + &quot;px&quot;; box.innerText = `Width: $&#123;boxWidth&#125; , Height: $&#123;boxHeight&#125;`; &#125;); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"Web APIs","slug":"Web-APIs","permalink":"https://www.oocii.com/categories/Web-APIs/"}],"tags":[{"name":"web api","slug":"web-api","permalink":"https://www.oocii.com/tags/web-api/"},{"name":"observer","slug":"observer","permalink":"https://www.oocii.com/tags/observer/"},{"name":"ResizeObserver","slug":"ResizeObserver","permalink":"https://www.oocii.com/tags/ResizeObserver/"}]},{"title":"现代浏览器支持的 5 种类型的 Observer (3) —— Performance Observer","slug":"yuque/现代浏览器支持的 5 种类型的 Observer (3) —— Performance Observer","date":"2018-03-23T12:36:56.000Z","updated":"2022-09-27T11:29:41.899Z","comments":true,"path":"yuque/现代浏览器支持的 5 种类型的 Observer (3) —— Performance Observer/","link":"","permalink":"https://www.oocii.com/yuque/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84%205%20%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%20Observer%20(3)%20%E2%80%94%E2%80%94%20Performance%20Observer/","excerpt":"","text":"什么是观察者？在深入了解现代浏览器支持的观察者系列之前，让我们先了解一般的观察者是什么？观察者是一个观察或注意到某事的程序。观察者有助于观察浏览器中发生的某些活动并做出相应的响应。 我们经常处理用 addEventListener 来添加事件监听用户的各种操作，比如：click, mousedown, drag, wheel 等（完整事件列表参考：https://developer.mozilla.org/zh-CN/docs/Web/Events） 。 现代浏览器提供了 5 种 Observer ，使用这些 Observer ，我们可以观察浏览器中发生的不同类型的活动，并采取必要的行动。例如。我们可以观察到，视频是否显示在视口中并启用自动播放，是否已从父 DOM 元素中添加或删除子元素，是否更改了框元素的大小/尺寸等等。 以下是现代浏览器支持的五种不同类型的 Observer 。 Intersection Observer Mutation Observer Performance Observer Resize Observer ReportingObserver Performance Observer用于观察Performance Timeline，并在浏览器记录新的性能条目时得到通知。它可用于测量浏览器和 nodejs 应用程序中的某些性能指标。在浏览器中，我们可以使用 Window 对象作为 window.PerformanceObserver 访问观察者，而在 nodejs 应用程序中，我们必须要求 perf_hooks 才能获取性能对象。例如。const { performance } = require(‘perf_hooks’); ** **它在以下情况下很有用: 测量请求和响应之间的处理时间。（在浏览器中） 从数据库中检索数据时计算持续时间。（在 nodejs 应用程序中） 使用 Paint Timing Api 提取精确的时间信息，例如第一次绘画或第一次内容丰富的绘画时间。 使用 User Timing API、Navigation Timing API、Network Information API、Resource Timing API、Paint Timing API访问性能指标 PerformanceObserver的实现需要三个步骤a) 创建观察者只需调用其构造函数并传递处理函数即可创建。 const observer = new PerformanceObserver(logger); b) 定义目标对象以观察observer.observe(..) 方法接受可以观察的有效条目类型集。这些入口类型可能属于各种性能 API，例如用户计时或导航计时 API。有效的 entryType 值为：[ USER-TIMING ]、[ USER-TIMING ]、[ NAVIGATION-TIMING-2 ]、[ RESOURCE-TIMING ]。”mark””measure“”navigation“”resource“ const config = &#123; entryTypes: [“mark”, “measure”] &#125;; observer.observe(config); c) 定义回调处理程序 只要在应用程序中使用观察到的事件，就会触发回调处理程序。例如。它可以用来标记瞬间和测量从开始到结束瞬间的持续时间。 function getDataFromServer() &#123; performance.mark(“startWork”); // see [USER-TIMING] doWork(); // Some developer code performance.mark(“endWork”); performance.measure(“start to end”, “startWork”, “endWork”); const measure = performance.getEntriesByName(‘start to end’)[0]; &#125; function logger(list, observer) &#123; const entries = list.getEntries(); entries.forEach((entry) =&gt; &#123; console.log(“Name: “ + entry.name + “, Type: “ + entry.entryType + “, Start: “ + entry.startTime + “, Duration: “ + entry.duration + “\\n”); &#125;); &#125; 使用 PerformanceObserver api 的简单演示。当用户单击一个按钮时，它会将时刻标记为**开始**_ *和***结束_**，并测量 3000 毫秒后的持续时间。可以在控制台中查看输出。 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; button &#123; background: purple; color: white; cursor: pointer; display: inline-block; font-size: 20px; padding: 1.75rem 1rem; text-align: center; text-decoration: none; font-weight: bold; margin-right: 5px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;测试性能&lt;/button&gt; &lt;p&gt;* 注意打开控制台查看输出&lt;/p&gt; &lt;script&gt; if (!(&quot;PerformanceObserver&quot; in window)) &#123; document.body.innerText = &quot;Not supported by your browser&quot;; &#125; /* Initialize performance observer */ const observer = new PerformanceObserver(logger); const config = &#123; entryTypes: [&quot;mark&quot;, &quot;measure&quot;], &#125;; observer.observe(config); /* Callback function */ function logger(list, observer) &#123; const entries = list.getEntries(); console.log(&quot;Entries: &quot;, entries); entries.forEach((entry) =&gt; &#123; console.log( &quot;Name: &quot; + entry.name + &quot;, Type: &quot; + entry.entryType + &quot;, Start: &quot; + entry.startTime + &quot;, Duration: &quot; + entry.duration + &quot;\\n&quot; ); &#125;); &#125; /* Add click listener on button */ document.querySelector(&quot;button&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123; console.log(&quot;Start measuring&quot;); getDataFromServer(); &#125;); function getDataFromServer() &#123; window.performance.mark(&quot;start&quot;); setTimeout(() =&gt; &#123; window.performance.mark(&quot;end&quot;); window.performance.measure(&quot;start to end&quot;, &quot;start&quot;, &quot;end&quot;); const measure = performance.getEntriesByName(&quot;start to end&quot;)[0]; window.performance.clearMeasures([&quot;start to end&quot;]); window.performance.clearMarks([&quot;start&quot;, &quot;end&quot;]); //console.log(&quot;Duration: &quot;,measure.duration); &#125;, 3000); &#125; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"Web APIs","slug":"Web-APIs","permalink":"https://www.oocii.com/categories/Web-APIs/"}],"tags":[{"name":"web api","slug":"web-api","permalink":"https://www.oocii.com/tags/web-api/"},{"name":"observer","slug":"observer","permalink":"https://www.oocii.com/tags/observer/"},{"name":"PerformanceObserver","slug":"PerformanceObserver","permalink":"https://www.oocii.com/tags/PerformanceObserver/"}]},{"title":"现代浏览器支持的 5 种类型的 Observer (2) —— Mutation Observer","slug":"yuque/现代浏览器支持的 5 种类型的 Observer (2) —— Mutation Observer","date":"2018-03-18T12:27:34.000Z","updated":"2022-09-27T11:29:42.043Z","comments":true,"path":"yuque/现代浏览器支持的 5 种类型的 Observer (2) —— Mutation Observer/","link":"","permalink":"https://www.oocii.com/yuque/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84%205%20%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%20Observer%20(2)%20%E2%80%94%E2%80%94%20Mutation%20Observer/","excerpt":"","text":"什么是观察者？在深入了解现代浏览器支持的观察者系列之前，让我们先了解一般的观察者是什么？观察者是一个观察或注意到某事的程序。观察者有助于观察浏览器中发生的某些活动并做出相应的响应。 我们经常处理用 addEventListener 来添加事件监听用户的各种操作，比如：click, mousedown, drag, wheel 等（完整事件列表参考：https://developer.mozilla.org/zh-CN/docs/Web/Events） 。 现代浏览器提供了 5 种 Observer ，使用这些 Observer ，我们可以观察浏览器中发生的不同类型的活动，并采取必要的行动。例如。我们可以观察到，视频是否显示在视口中并启用自动播放，是否已从父 DOM 元素中添加或删除子元素，是否更改了框元素的大小/尺寸等等。 以下是现代浏览器支持的五种不同类型的 Observer 。 Intersection Observer Mutation Observer Performance Observer Resize Observer ReportingObserver [ ](https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver/observe)Mutation Observer用于观察DOM 元素的变化。观察父节点中子节点的添加或删除、属性值或数据内容的变化等变化是很有用的。在 MutationObserver 之前，DOM 变化事件由Mutation 事件处理，例如 DOMAttrModified, DOMAttributeNameChanged, DOMNodeInserted.Mutation Observer 被设计为替代 DOM3 事件规范中定义的突变事件。避免突变事件的实际原因是性能问题和跨浏览器支持。这个新 api 的最大受众可能是构建 JS 框架的人，主要是为了解决问题和创建交互。另一个用例是您正在使用操纵 DOM 的框架并且需要有效地对这些修改做出反应（并且没有 setTimeout hack）。浏览器支持：它对不同的浏览器都有很好的支持。 一般来说，MutationObserver 的实现需要三个步骤a) 创建观察者只需调用其构造函数并传递处理函数和配置选项即可创建。我们可以选择指定我们想要跟踪或观察什么样的变化。 const config = &#123; childList: true, attributes: true, characterData: true, &#125;; const observer = new MutationObserver(handler); childList：true，表示观察子节点相关的变化，attributes：true 表示观察属性变化，characterData：true 表示观察目标元素数据内容的变化。 b) 定义目标对象来观察observer.observe(…) 方法接受应该被观察的目标元素。 const parent = document.querySelector(“.parent”); observer.observe(parent, config); c) 定义回调处理程序根据观察者创建过程中使用的配置，只要目标元素发生更改，就会执行回调函数。回调函数由突变记录对象触发，其中包含目标元素中发生的突变类型。 function handler(mutationRecords, observer) &#123; mutationRecords.forEach((mutationRecord) =&gt; &#123; switch(mutationRecord.type) &#123; case “childList”: //child node added or removed break; case “attributes”: // attribute changed break; default: &#125; &#125;); &#125; 这里准备了一个示例，每当添加或删除新的子节点以及属性更改时，它都会触发**MutationObserver **的回调处理程序。示例： &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .container &#123; margin: 10px; &#125; .button &#123; background: purple; color: white; cursor: pointer; display: inline-block; font-size: 20px; padding: 1.75rem 1rem; text-align: center; text-decoration: none; font-weight: bold; margin: 5px; &#125; .button:hover &#123; background: #ad1457; &#125; .parent &#123; border: 1px solid #ccc; padding: 10px; &#125; .child &#123; background: #673ab7; color: #fff; padding: 10px; margin-top: 5px; &#125; .infoBoard &#123; padding: 10px; border: 1px solid #ccc; font-size: 20px; padding: 1.75rem 1rem; background: #f4f4f4; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div&gt; &lt;div class=&quot;button addBtn&quot;&gt;Add Child Node&lt;/div&gt; &lt;div class=&quot;button removeBtn&quot;&gt;Remove Child Node&lt;/div&gt; &lt;div class=&quot;button changeAttrBtn&quot;&gt;Change Attribute Value&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;parent&quot; data-count=&quot;0&quot;&gt; &lt;div class=&quot;child&quot;&gt;Child&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;infoBoard&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; if (!(&quot;MutationObserver&quot; in window)) &#123; document.body.innerText = &quot;Not supported by your browser&quot;; &#125; const config = &#123; childList: true, attributes: true, characterData: true, &#125;; const observer = new MutationObserver(handler); const parent = document.querySelector(&quot;.parent&quot;); observer.observe(parent, config); function handler(mutationRecords, observer) &#123; console.log(&quot;Handle mutation&quot;); mutationRecords.forEach((mutationRecord) =&gt; &#123; const info = document.querySelector(&quot;.infoBoard&quot;); switch (mutationRecord.type) &#123; case &quot;childList&quot;: info.innerText = &quot;Mutation Observer handler: Child node added or removed&quot;; break; case &quot;attributes&quot;: info.innerText = `Mutation Observer handler: Parent attribute modified: $&#123;mutationRecord.attributeName&#125; : $&#123;mutationRecord.target.children.length&#125;`; break; default: info.innerText = &quot;&quot;; &#125; &#125;); &#125; document.querySelector(&quot;.addBtn&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123; console.log(&quot;Add child&quot;); const child = document.createElement(&quot;div&quot;); child.className = &quot;child&quot;; child.innerText = &quot;Child &quot;; parent.appendChild(child); &#125;); document.querySelector(&quot;.removeBtn&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123; console.log(&quot;Remove child&quot;); const child = parent.firstChild; parent.removeChild(child); &#125;); /* Change attribute value when clicked on change attribute button */ document.querySelector(&quot;.changeAttrBtn&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123; console.log(&quot;Change attribute value&quot;); parent.setAttribute(&quot;data-count&quot;, parent.childNodes.length); &#125;); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"Web APIs","slug":"Web-APIs","permalink":"https://www.oocii.com/categories/Web-APIs/"}],"tags":[{"name":"web api","slug":"web-api","permalink":"https://www.oocii.com/tags/web-api/"},{"name":"observer","slug":"observer","permalink":"https://www.oocii.com/tags/observer/"},{"name":"MutationObserver","slug":"MutationObserver","permalink":"https://www.oocii.com/tags/MutationObserver/"}]},{"title":"现代浏览器支持的 5 种类型的 Observer (1) —— Intersection Observer","slug":"yuque/现代浏览器支持的 5 种类型的 Observer (1) —— Intersection Observer","date":"2018-03-17T11:51:18.000Z","updated":"2022-09-27T11:29:42.102Z","comments":true,"path":"yuque/现代浏览器支持的 5 种类型的 Observer (1) —— Intersection Observer/","link":"","permalink":"https://www.oocii.com/yuque/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84%205%20%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%20Observer%20(1)%20%E2%80%94%E2%80%94%20Intersection%20Observer/","excerpt":"","text":"什么是观察者？在深入了解现代浏览器支持的观察者系列之前，让我们先了解一般的观察者是什么？观察者是一个观察或注意到某事的程序。观察者有助于观察浏览器中发生的某些活动并做出相应的响应。 我们经常处理用 addEventListener 来添加事件监听用户的各种操作，比如：click, mousedown, drag, wheel 等（完整事件列表参考：https://developer.mozilla.org/zh-CN/docs/Web/Events） 。 现代浏览器提供了 5 种 Observer ，使用这些 Observer ，我们可以观察浏览器中发生的不同类型的活动，并采取必要的行动。例如。我们可以观察到，视频是否显示在视口中并启用自动播放，是否已从父 DOM 元素中添加或删除子元素，是否更改了框元素的大小/尺寸等等。 以下是现代浏览器支持的五种不同类型的 Observer 。 Intersection Observer Mutation Observer Performance Observer Resize Observer ReportingObserver Intersection Observer(https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver) 用于观察两个 html DOM 元素之间的交集。当元素进入或离开可见视口时，观察 DOM 中的元素很有用。Intersection Observer 的一些用例描述如下 当元素在视口中可见时延迟加载图像或其他资源。 识别广告的可见性并计算广告收入。 当用户向下滚动页面时实现“无限滚动”网站，这样他们就不必浏览不同的页面。 当元素在视口内时加载和自动播放视频或动画。 浏览器支持：目前，firefox 和 chrome 支持 Intersection 观察器，但我们可以为旧浏览器找到 polyfill 使用 IntersectionObserver api 主要需要三个步骤a) 定义回调处理程序b) 创建观察者c) 定义要观察的目标对象 a) 定义回调处理程序这是当人们注意到警报时做出的响应，因为通常发生了一些事情。每当目标元素与根元素通过阈值相交时，就会触发回调处理程序。 语法：const observer = new IntersectionObserver(_callback_[, options]); callback当元素可见比例超过指定阈值后，会调用一个回调函数，此回调函数接受两个参数：entries一个IntersectionObserverEntry对象的数组，每个被触发的阈值，都或多或少与指定阈值有偏差。observer被调用的IntersectionObserver实例。 // entries 一个IntersectionObserverEntry对象的数组，每个被触发的阈值，都或多或少与指定阈值有偏差。 // https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry function handler(entries, observer) &#123; entries.forEach((entry) =&gt; &#123; // Each entry describes an intersection change for one observed target element. // entry.boundingClientRect // entry.intersectionRatio // entry.intersectionRect // entry.isIntersecting // entry.rootBounds // entry.target // entry.time &#125;); &#125; 参考：https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver/IntersectionObserver b)**创建观察者*只需调用构造函数IntersectionObserver*并传递处理函数和配置选项即可创建。 语法：const observer = new IntersectionObserver(_callback_[, options]); options 可选一个可以用来配置 observer 实例的对象。如果 options 未指定，observer 实例默认使用文档视口作为 root，并且没有 margin，阈值为 0%（意味着即使一像素的改变都会触发回调函数）。你可以指定以下配置：root监听元素的祖先元素Element对象，其边界盒将被视作视口。目标在根的可见区域的的任何不可见部分都会被视为不可见。rootMargin一个在计算交叉值时添加至根的边界盒(bounding_box(en-US))中的一组偏移量，类型为字符串(string) ，可以有效的缩小或扩大根的判定范围从而满足计算需要。语法大致和 CSS 中的margin 属性等同; 可以参考 The root element and root margin in Intersection Observer API来深入了解 margin 的工作原理及其语法。默认值是”0px 0px 0px 0px”。threshold规定了一个监听目标与边界盒交叉区域的比例值，可以是一个具体的数值或是一组 0.0 到 1.0 之间的数组。若指定值为 0.0，则意味着监听元素即使与根有 1 像素交叉，此元素也会被视为可见. 若指定值为 1.0，则意味着整个元素都在可见范围内时才算可见。可以参考Thresholds in Intersection Observer API 来深入了解阈值是如何使用的。阈值的默认值为 0.0。 const options = &#123; root: document.querySelector(&quot;.scrollContainer&quot;), rootMargin: ‘0px’, threshold: [0.3, 0.5, 0.8, 1] &#125;; const observer = new IntersectionObserver(handler, options); 参考：https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver/IntersectionObserver [0.3] 的阈值意味着，当目标元素在根元素指定的元素内有 30% 可见时，调用处理函数。这意味着只要元素可见 30%、50%、80% 和 100%，就会调用处理程序/回调函数。 c) 定义要观察的目标对象我们可以定义多个要观察的目标对象。如前例所述，狗在提醒所有人之前应该知道要观察什么。**只需调用相应观察者的.observe(target)**方法即可观察任何目标元素。 const target = document.querySelector(“.targetBox”); observer.observe(target); 参考：https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver/observe","categories":[{"name":"Web APIs","slug":"Web-APIs","permalink":"https://www.oocii.com/categories/Web-APIs/"}],"tags":[{"name":"web api","slug":"web-api","permalink":"https://www.oocii.com/tags/web-api/"},{"name":"observer","slug":"observer","permalink":"https://www.oocii.com/tags/observer/"},{"name":"IntersectionObserver","slug":"IntersectionObserver","permalink":"https://www.oocii.com/tags/IntersectionObserver/"}]},{"title":"git log 导出为csv格式文件和常用参数","slug":"yuque/git log 导出为csv格式文件和常用参数","date":"2017-07-23T12:10:20.000Z","updated":"2022-09-27T11:29:42.355Z","comments":true,"path":"yuque/git log 导出为csv格式文件和常用参数/","link":"","permalink":"https://www.oocii.com/yuque/git%20log%20%E5%AF%BC%E5%87%BA%E4%B8%BAcsv%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E5%92%8C%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/","excerpt":"","text":"**git log ** –author=Axon –after=2017/1/1 –before=2018/1/1 –pretty=format:’”%an”,”%ad”,”%s”‘ &gt;git-log.csv 常用的格式占位符写法及其代表的意义。 -n 仅显示最近的 n 条提交 --since, --after 仅显示指定时间之后的提交。 --until, --before 仅显示指定时间之前的提交。 --author 仅显示指定作者相关的提交。 --committer 仅显示指定提交者相关的提交。 -p 按补丁格式显示每个更新之间的差异。 --stat 显示每次更新的文件修改统计信息。 --shortstat 只显示 --stat 中最后的行数修改添加移除统计。 --name-only 仅在提交信息后显示已修改的文件清单。 --name-status 显示新增、修改、删除的文件清单。 --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。 --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。 --graph 显示 ASCII 图形表示的分支合并历史。 git log &lt;file&gt; # 查看该文件每次提交记录 git log -p &lt;file&gt; # 查看每次详细修改内容的diff git log -p -2 # 查看最近两次详细修改内容的diff git log --stat #查看提交统计信息 –pretty 选项 说明: --pretty 使用其他格式显示历史提交信息。 可用的选项包括 oneline，short，full，fuller: --pretty=oneline #（下同） &lt;hash&gt; &lt;title-line&gt; This is designed to be as compact as possible. --pretty=short commit &lt;hash&gt; Author: &lt;author&gt; &lt;title-line&gt; --pretty=medium commit &lt;hash&gt; Author: &lt;author&gt; Date: &lt;author-date&gt; &lt;title-line&gt; &lt;full-commit-message&gt; --pretty=full commit &lt;hash&gt; Author: &lt;author&gt; Commit: &lt;committer&gt; &lt;title-line&gt; &lt;full-commit-message&gt; --pretty=fuller commit &lt;hash&gt; Author: &lt;author&gt; AuthorDate: &lt;author-date&gt; Commit: &lt;committer&gt; CommitDate: &lt;committer-date&gt; &lt;title-line&gt; &lt;full-commit-message&gt; --pretty=reference &lt;abbrev-hash&gt; (&lt;title-line&gt;, &lt;short-author-date&gt;) ... --pretty=format:&#39;&quot;%h&quot;,&quot;%an&quot;,&quot;%ad&quot;,&quot;%s&quot;&#39; #（后跟指定格式）: %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 -date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者(committer)的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明 %H 提交（commit）的完整哈希字串 %h 提交的简短哈希字串 %T 树（tree）的完整哈希字串 %t 树的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 参考资料：https://git-scm.com/docs/pretty-formats","categories":[{"name":"Git","slug":"Git","permalink":"https://www.oocii.com/categories/Git/"}],"tags":[{"name":"git log","slug":"git-log","permalink":"https://www.oocii.com/tags/git-log/"},{"name":"pretty","slug":"pretty","permalink":"https://www.oocii.com/tags/pretty/"}]},{"title":"flex布局子元素撑开父元素问题","slug":"default/flex布局子元素撑开父元素问题","date":"2017-05-23T12:08:12.000Z","updated":"2022-01-21T04:01:16.770Z","comments":true,"path":"default/flex布局子元素撑开父元素问题/","link":"","permalink":"https://www.oocii.com/default/flex%E5%B8%83%E5%B1%80%E5%AD%90%E5%85%83%E7%B4%A0%E6%92%91%E5%BC%80%E7%88%B6%E5%85%83%E7%B4%A0%E9%97%AE%E9%A2%98/","excerpt":"","text":"用 flex 布局时遇到一个问题，原本想让 flex 子元素平均宽度显示，却因为子元素里面的内容宽度把其中一个子元素宽度撑开导致宽度不一致。先看代码： .flex-box&#123; width: 500px; display: flex; padding: 10px; border: 2px solid orange; &#125; .flex-box div&#123; flex: 1; border: 1px solid black; &#125; .flex-box div p&#123; white-space: nowrap; &#125; &lt;div class=&quot;flex-box&quot;&gt; &lt;div &gt; &lt;p&gt;普通文本&lt;/p&gt; &lt;/div&gt; &lt;div &gt; &lt;p&gt;超长不换行的文本，超长不换行的文本，超长不换行的文本，超长不换行的文本，超长不换行的文本。&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; 期望得到以下的效果： 但实际的效果却是下面这样, 无法达到两列宽度平均的效果： 查了一下资料，发现了原因， W3C 规范定义：To provide a more reasonable default minimum size for flex items, the used value of a main axis automatic minimum size on a flex item that is not a scroll container is a content-based minimum size; for scroll containers the automatic minimum size is zero, as usual. 浏览器默认为 flex item 设置了 “min-width: auto;min-height: auto”, 即flex子元素的最小宽度高度不能小于其内容的宽度高度。 通过设置 min-width: 0;, 覆盖掉这个默认设置, flex-shrink 属性就能生效了: .flex-box&#123; width: 500px; display: flex; padding: 10px; border: 1px solid red; &#125; .flex-box div&#123; min-width: 0; // 新增行 flex: 1; border: 1px solid black; &#125; .flex-box div p&#123; white-space: nowrap; &#125; 效果就正常了（由于业务需要有些地方不能用 overflow: hidden;）： 但也有一种情况就是即使设置了 min-width: 0， flex-shrink 也不起作用，原因是多层嵌套 flex, 需要把最外层的 flex item 也设置 min-width: 0;才能起作用。 最后发现有一种简单粗暴的方法，就是直接设置 flex item 设置：width: 0; 不受多层嵌套 flex 的影响。 .flex-box&#123; width: 500px; display: flex; padding: 10px; border: 1px solid red; &#125; .flex-box div&#123; width: 0; // 新增修改行 flex: 1; border: 1px solid black; &#125; .flex-box div p&#123; white-space: nowrap; &#125; 参考资料：https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size?answertab=votes#tab-tophttps://www.w3.org/TR/css-flexbox-1/#min-size-autohttps://juejin.cn/post/6974356682574921765#comment","categories":[{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/tags/CSS/"},{"name":"flex","slug":"flex","permalink":"https://www.oocii.com/tags/flex/"},{"name":"flex-shrink","slug":"flex-shrink","permalink":"https://www.oocii.com/tags/flex-shrink/"}]},{"title":"怎么解决 Git 的 fatal: refusing to merge unrelated histories","slug":"yuque/怎么解决 Git 的 !fatal! refusing to merge unrelated histories","date":"2017-05-14T12:50:33.000Z","updated":"2022-09-27T11:29:42.349Z","comments":true,"path":"yuque/怎么解决 Git 的 !fatal! refusing to merge unrelated histories/","link":"","permalink":"https://www.oocii.com/yuque/%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%20Git%20%E7%9A%84%20!fatal!%20refusing%20to%20merge%20unrelated%20histories/","excerpt":"","text":"使用 Git 一段时间后，你会注意到有很多难以修复的错误。 “fatal: refusing to merge unrelated histories”。与许多其他错误不同，此问题有一个解决方案，你可以在遇到它时重复使用。先说解决方法：git pull origin master –allow-unrelated-histories 但为什么会发生错误呢？Git 提示 “fatal: refusing to merge unrelated histories” 是当两个不相关的项目合并到一个分支中时会发生错误。出现此错误是因为每个项目都有自己的提交和标签历史。这两种历史将互不相容。 出现此错误的主要情况有两种。 当你创建一个新的存储库、进行一些提交并尝试从另一个远程存储库中提取时，可能会发生此错误。将显示此错误，因为你正在使用的本地存储库将具有与你尝试检索的项目不同的历史记录。 如果项目中的 .git 目录已被删除或损坏，你可能会遇到此错误。在这种情况下，Git 命令行可能无法读取你本地项目的历史记录。 当你尝试将数据推送到远程存储库或从远程存储库提取数据时，将发生此错误。这是因为 Git 不知道远程存储库是否与你当前的存储库兼容。 如何解决 “fatal: refusing to merge unrelated histories” ?要解决此问题，你可以在–allow-unrelated-histories 从存储库中提取数据时使用该标志： » 更多： Git 错误：无法拉取…git pull origin master –allow-unrelated-histories 就可以将远程 master 分支拉取合并到本地分支。 或者，你可以使用 git clone 克隆远程存储库的新版本并重新开始。但是通常不需要这样做。 你可以在官方 Git 文档中阅读更多关于 –allow-unrelated-histories 标志的信息。 结论“fatal: refusing to merge unrelated histories” 发生在 .git 目录不可读或尝试从具有自己的提交历史的存储库中提取数据时。这个错误告诉你，你正在尝试将两个不相关的项目合并到同一个工作树。 你可以很容易使用 –allow-unrelated-histories 标志来解决此错误！","categories":[{"name":"Git","slug":"Git","permalink":"https://www.oocii.com/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://www.oocii.com/tags/git/"},{"name":"fatal","slug":"fatal","permalink":"https://www.oocii.com/tags/fatal/"}]},{"title":"Blob 和 ArrayBuffer 之间转换","slug":"default/Blob 和 ArrayBuffer 之间转换","date":"2017-01-27T11:44:14.000Z","updated":"2022-01-27T12:00:46.043Z","comments":true,"path":"default/Blob 和 ArrayBuffer 之间转换/","link":"","permalink":"https://www.oocii.com/default/Blob%20%E5%92%8C%20ArrayBuffer%20%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/","excerpt":"","text":"JavaScript 有两种主要的方式来表示浏览器中的二进制数据。ArrayBuffers/TypedArrays 包含可以直接操作的可变（尽管仍然是固定长度）二进制数据。Blob 包含只能通过异步文件接口访问的不可变二进制数据。 将 Blob 转换为 ArrayBuffer（异步方式）var blob = new Blob([&quot;\\x01\\x02\\x03\\x04&quot;]), fileReader = new FileReader(), array; fileReader.onload = function () &#123; array = this.result; console.log(&quot;Array contains&quot;, array.byteLength, &quot;bytes.&quot;); &#125;; fileReader.readAsArrayBuffer(blob); 6 使用 Promise 将 Blob 转换为 ArrayBuffer（异步方式）var blob = new Blob([&quot;\\x01\\x02\\x03\\x04&quot;]); var arrayPromise = new Promise(function (resolve) &#123; var reader = new FileReader(); reader.onloadend = function () &#123; resolve(reader.result); &#125;; reader.readAsArrayBuffer(blob); &#125;); arrayPromise.then(function (array) &#123; console.log(&quot;Array contains&quot;, array.byteLength, &quot;bytes.&quot;); &#125;); 将 ArrayBuffer 或 TypedArray 转换为 Blobvar array = new Uint8Array([0x04, 0x06, 0x07, 0x08]); var blob = new Blob([array]); ​ 参考：https://developer.mozilla.org/en-US/docs/Web/API/Blobhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBufferhttps://es6.ruanyifeng.com/#docs/arraybuffer#ArrayBuffer-%E5%AF%B9%E8%B1%A1","categories":[{"name":"二进制数据","slug":"二进制数据","permalink":"https://www.oocii.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"blob","slug":"blob","permalink":"https://www.oocii.com/tags/blob/"},{"name":"arrayBuffer","slug":"arrayBuffer","permalink":"https://www.oocii.com/tags/arrayBuffer/"},{"name":"binary data","slug":"binary-data","permalink":"https://www.oocii.com/tags/binary-data/"},{"name":"converting","slug":"converting","permalink":"https://www.oocii.com/tags/converting/"}]}],"categories":[{"name":"DOM","slug":"DOM","permalink":"https://www.oocii.com/categories/DOM/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.oocii.com/categories/JavaScript/"},{"name":"Standard built-in objects","slug":"JavaScript/Standard-built-in-objects","permalink":"https://www.oocii.com/categories/JavaScript/Standard-built-in-objects/"},{"name":"Date","slug":"JavaScript/Standard-built-in-objects/Date","permalink":"https://www.oocii.com/categories/JavaScript/Standard-built-in-objects/Date/"},{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/categories/CSS/"},{"name":"formatting context","slug":"CSS/formatting-context","permalink":"https://www.oocii.com/categories/CSS/formatting-context/"},{"name":"软件架构模式","slug":"软件架构模式","permalink":"https://www.oocii.com/categories/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"},{"name":"Array","slug":"JavaScript/Array","permalink":"https://www.oocii.com/categories/JavaScript/Array/"},{"name":"Vue","slug":"Vue","permalink":"https://www.oocii.com/categories/Vue/"},{"name":"slot","slug":"Vue/slot","permalink":"https://www.oocii.com/categories/Vue/slot/"},{"name":"WebRTC","slug":"WebRTC","permalink":"https://www.oocii.com/categories/WebRTC/"},{"name":"CodePen","slug":"CodePen","permalink":"https://www.oocii.com/categories/CodePen/"},{"name":"UML","slug":"UML","permalink":"https://www.oocii.com/categories/UML/"},{"name":"Web APIs","slug":"Web-APIs","permalink":"https://www.oocii.com/categories/Web-APIs/"},{"name":"Git","slug":"Git","permalink":"https://www.oocii.com/categories/Git/"},{"name":"二进制数据","slug":"二进制数据","permalink":"https://www.oocii.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"dom","slug":"dom","permalink":"https://www.oocii.com/tags/dom/"},{"name":"node","slug":"node","permalink":"https://www.oocii.com/tags/node/"},{"name":"element","slug":"element","permalink":"https://www.oocii.com/tags/element/"},{"name":"Javascript","slug":"Javascript","permalink":"https://www.oocii.com/tags/Javascript/"},{"name":"JS","slug":"JS","permalink":"https://www.oocii.com/tags/JS/"},{"name":"ES","slug":"ES","permalink":"https://www.oocii.com/tags/ES/"},{"name":"date","slug":"date","permalink":"https://www.oocii.com/tags/date/"},{"name":"timestamp","slug":"timestamp","permalink":"https://www.oocii.com/tags/timestamp/"},{"name":"img","slug":"img","permalink":"https://www.oocii.com/tags/img/"},{"name":"CSS","slug":"CSS","permalink":"https://www.oocii.com/tags/CSS/"},{"name":"BFC","slug":"BFC","permalink":"https://www.oocii.com/tags/BFC/"},{"name":"Software Architecture Patterns","slug":"Software-Architecture-Patterns","permalink":"https://www.oocii.com/tags/Software-Architecture-Patterns/"},{"name":"Architecture","slug":"Architecture","permalink":"https://www.oocii.com/tags/Architecture/"},{"name":"架构设计","slug":"架构设计","permalink":"https://www.oocii.com/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"架构模式","slug":"架构模式","permalink":"https://www.oocii.com/tags/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"},{"name":"Array","slug":"Array","permalink":"https://www.oocii.com/tags/Array/"},{"name":"vue","slug":"vue","permalink":"https://www.oocii.com/tags/vue/"},{"name":"slot","slug":"slot","permalink":"https://www.oocii.com/tags/slot/"},{"name":"scopedSlots","slug":"scopedSlots","permalink":"https://www.oocii.com/tags/scopedSlots/"},{"name":"dynamicSlotName","slug":"dynamicSlotName","permalink":"https://www.oocii.com/tags/dynamicSlotName/"},{"name":"WebRTC","slug":"WebRTC","permalink":"https://www.oocii.com/tags/WebRTC/"},{"name":"MediaDevices","slug":"MediaDevices","permalink":"https://www.oocii.com/tags/MediaDevices/"},{"name":"RTCPeerConnection","slug":"RTCPeerConnection","permalink":"https://www.oocii.com/tags/RTCPeerConnection/"},{"name":"RTCDataChannel","slug":"RTCDataChannel","permalink":"https://www.oocii.com/tags/RTCDataChannel/"},{"name":"codepen","slug":"codepen","permalink":"https://www.oocii.com/tags/codepen/"},{"name":"code","slug":"code","permalink":"https://www.oocii.com/tags/code/"},{"name":"snippet","slug":"snippet","permalink":"https://www.oocii.com/tags/snippet/"},{"name":"UML","slug":"UML","permalink":"https://www.oocii.com/tags/UML/"},{"name":"web api","slug":"web-api","permalink":"https://www.oocii.com/tags/web-api/"},{"name":"observer","slug":"observer","permalink":"https://www.oocii.com/tags/observer/"},{"name":"ResizeObserver","slug":"ResizeObserver","permalink":"https://www.oocii.com/tags/ResizeObserver/"},{"name":"PerformanceObserver","slug":"PerformanceObserver","permalink":"https://www.oocii.com/tags/PerformanceObserver/"},{"name":"MutationObserver","slug":"MutationObserver","permalink":"https://www.oocii.com/tags/MutationObserver/"},{"name":"IntersectionObserver","slug":"IntersectionObserver","permalink":"https://www.oocii.com/tags/IntersectionObserver/"},{"name":"git log","slug":"git-log","permalink":"https://www.oocii.com/tags/git-log/"},{"name":"pretty","slug":"pretty","permalink":"https://www.oocii.com/tags/pretty/"},{"name":"flex","slug":"flex","permalink":"https://www.oocii.com/tags/flex/"},{"name":"flex-shrink","slug":"flex-shrink","permalink":"https://www.oocii.com/tags/flex-shrink/"},{"name":"git","slug":"git","permalink":"https://www.oocii.com/tags/git/"},{"name":"fatal","slug":"fatal","permalink":"https://www.oocii.com/tags/fatal/"},{"name":"blob","slug":"blob","permalink":"https://www.oocii.com/tags/blob/"},{"name":"arrayBuffer","slug":"arrayBuffer","permalink":"https://www.oocii.com/tags/arrayBuffer/"},{"name":"binary data","slug":"binary-data","permalink":"https://www.oocii.com/tags/binary-data/"},{"name":"converting","slug":"converting","permalink":"https://www.oocii.com/tags/converting/"}]}